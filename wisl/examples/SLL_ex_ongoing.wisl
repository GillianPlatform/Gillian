//
//  SLL predicates
//

// With addresses
predicate SLL_addrs(+x, xs : List) {
  // Empty SLL
  (x == null) * (xs == []);
  // One SLL node and the rest
  (x -b> #v, #y) * SLL_addrs(#y, #xs) * (xs == #y :: #xs) [hides: #v]
}

// With values
predicate SLL_vals(+x, vs : List) {
  // Empty SLL
  (x == null) * (vs == []);
  // One SLL node and the rest
  (x -b> #v, #y) * SLL_vals(#y, #vs) * (vs == #v :: #vs) [hides: #y]
}

// With values
predicate SLL(+x, xs : List, vs : List) {
  // Empty SLL
  (x == null) * (xs == []) * (vs == []);
  // One SLL node and the rest
  (x -b> #v, #y) * SLL(#y, #xs, #vs) * (xs == #y :: #xs) * (vs == #v :: #vs) [hides: ]
}

// With length
predicate SLL_len(+x, n : Int) {
  // Empty SLL
  (x == null) * (n == 0);
  // One SLL node and the rest
  (x -b> #v, #y) * SLL_len(#y, n - 1) [hides: #v, #y]
}

//
//
//  Examples
//
//

// General pre-condition of list length
predicate SLL_length_pre(+x, def, var : Int) {
    (def == 0) * (x == #x) * SLL_addrs(#x, #xs) * (var == len #xs);
    (def == 1) * (x == #x) * SLL_vals(#x, #vs) * (var == len #vs);
    (def == 2) * (x == #x) * SLL(#x, #xs, #vs) * (var == len #xs);
    (def == 3) * (x == #x) * SLL_len(#x, #n) * (var == #n)
}

// General post for SLL length
predicate nounfold SLL_length_post(+def, +x, retval) {
    (def == 0) * SLL_addrs(x, #xs) * (retval == len #xs);
    (def == 1) * SLL_vals(x, #vs) * (retval == len #vs);
    (def == 2) * SLL(x, #xs, #vs) * (retval == len #xs);
    (def == 3) * SLL_len(x, retval)
}

// List length (recursive)
{ (x == #x) * SLL_length_pre(#x, #def, #var) } with variant: #var
function SLL_length(x) {
  if (x = null){
    n := 0
  } else {
    t := [x + 1];
    n := SLL_length(t);
    n := 1 + n
  };
  return n
}
{ SLL_length_post(#def, #x, ret) }

//
// SLL segment predicate with length
//
predicate SLLseg_len(+x, y, n : Int) {
  (x == y) * (n == 0);
  (x -b> #v, #z) * SLLseg_len(#z, y, n - 1) * (0 <# n)
}

//
// Lemma: appending a given value to a given SLLseg
//
lemma SSLseg_len_append {
  statement:
    forall x, z.
      SLLseg_len(x, #y, #n) * (#y -b> #v, z) |- SLLseg_len(x, z, #n + 1)

  variant: #n

  proof:
    unfold SLLseg_len(x, #y, #n);
    if (not (x = #y)) {
      assert {bind: #nv, #nnext}
        (x -b> #nv, #nnext) * SLLseg_len(#nnext, #y, #n - 1);
      apply SSLseg_len_append(#nnext, z)
    };
    fold SLLseg_len(x, z, #n + 1)
}

//
// Lemma: a null-terminating SLLseg is an SLL
//
lemma SLLseg_len_to_SLL_len {
  statement:
    forall x.
      SLLseg_len(x, null, #n) |- SLL_len(x, #n)

  variant: #n

  proof:
    unfold SLLseg_len(x, null, #n);
    if (not (#n = 0)) {
      assert {bind: #nv, #nnext} (x -b> #nv, #nnext);
      apply SLLseg_len_to_SLL_len(#nnext)
    }
}

// 06. Calculating the length of a given SLL
{ (x == #x) * SLL_len(x, #n) }
function SLL_length_iter(x) {
  y := x;
  n := 0;
  [[ invariant {bind: n, y, #ny}
        SLLseg_len(x, y, n) * SLL_len(y, #ny) * (#n == n + #ny)
        with variant: #ny ]];
  while (not (y = null)) {
    [[ assert {bind: #y} y == #y ]];
    [[ assert {bind: #v, #z} #y -b> #v, #z ]];
    y := [y + 1];
    n := n + 1;
    [[ apply SSLseg_len_append(x, y) ]]
  };
  [[ unfold SLL_len(null, 0) ]];
  [[ apply SLLseg_len_to_SLL_len(x) ]];
  return n
}
{ SLL_len(#x, #n) * (ret == n) }