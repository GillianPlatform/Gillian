predicate list(+x, alpha, ptrs) {
  (x == null) * (alpha == nil) * (ptrs == nil);
  (x -b> #v, #z) * list(#z, #beta, #rptrs) *
  (alpha == #v::#beta) * (ptrs == x::#rptrs)
}

{ (x == #x) * list(#x, #alpha, #ptrs) }
function dispose(x) {
  [[ invariant {bind: x, #beta, #rest_ptrs} list(x, #beta, #rest_ptrs) ]];
  while (not (x = null)) {
    t := [x + 1];
    delete(x);
    x := t
  };
  return null
}
{ emp }

{ (x == #x) * list(#x, #alpha, #ptrs) }
function list_dispose_double_free(x) {
  if (not (x = null)) {
    tail := [x + 1];
    delete(x);
    u := list_dispose_double_free(tail);
    delete(x)
  } else {
    skip
  };
  return null
}
{ emp }

// Use commented out spec
{ (x == #x) * list(#x, #alpha, #ptrs) }
function list_dispose_bad_spec(x) {
  if (not (x = null)) {
    tail := [x + 1];
    u := list_dispose_bad_spec(tail);
    delete(x)
  } else {
    skip
  };
  return null
}
{ emp }

{ (x == #x) * list(#x, #alpha, #ptrs) }
function list_dispose_out_of_bounds(x) {
  if (not (x = null)) {
    tail := [x + 2];
    u := list_dispose_out_of_bounds(tail);
    delete(x)
  } else {
    skip
  };
  return null
}
{ emp }