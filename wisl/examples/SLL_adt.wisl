datatype MyList {
  Nil;
  Cons(Any, MyList)
}

pure function append(xs : MyList, x) {
  case xs {
    Nil         -> 'Cons(x, 'Nil);
    Cons(y, ys) -> 'Cons(y, append(ys, x))
  }
}

pure function length(xs : MyList) {
  case xs {
    Nil         -> 0;
    Cons(x, xs) -> 1 + length(xs)
  }
}

pure function double_length(xs : MyList) {
  case xs {
    Nil         -> 0;
    Cons(x, xs) -> 2 + length(xs)
  }
}

//
// Standard over-approximating SLL predicate with contents
//
predicate SLL(+x, vs) {
  // Empty SLL
  (x == null) * (vs == 'Nil);
  // One SLL node and the rest
  (x -b> #v, #next) * SLL(#next, #vs) *
  (vs == 'Cons(#v, #vs))
}

// 00. Allocating an SLL node with the given value
{ v == #v }
function SLL_allocate_node(v){
  t := new(2);
  [t] := v;
  return t
}
{ SLL(ret, 'Cons(#v, 'Nil)) }

// This incorrect spec should fail to verify
{ (v == #v) * (u == #u) }
function SLL_allocate_node_fails(u, v){
  t := new(2);
  [t] := v;
  return t
}
{ SLL(ret, 'Cons(#u, 'Nil)) }


//
// RECURSIVE SLL MANIPULATION
//

// 01. Prepending a given value to a given SLL
{ (x == #x) * (k == #k) * SLL(#x, #vs) }
function SLL_prepend(x, k){
    z := SLL_allocate_node(k);
    [z + 1] := x;
    return z
}
{ SLL(ret, 'Cons(#k, #vs)) }

// 02. Appending a given value to a given SLL
{ (x == #x) * (k == #k) * SLL(#x, #vs) }
function SLL_append(x, k){
  if (x == null) {
    x := SLL_allocate_node(k)
    } else {
      t := [x + 1];
      z := SLL_append(t, k);
      [x + 1] := z
  };
  return x
}
{ SLL(ret,  append(#vs, #k)) }

// 06. Calculating the length of a given SLL
{ (x == #x) *  SLL(#x, #vs) }
function SLL_length(x) {
  n := 0;
  if (x == null){
    n := 0
  } else {
    t := [x + 1];
    n := SLL_length(t);
    n := 1 + n
  };
  return n
}
{ ret == length(#vs) }

// This spec fails to verify
{ (x == #x) *  SLL(#x, #vs) }
function SLL_length_fails(x) {
  n := 0;
  if (x == null){
    n := 0
  } else {
    t := [x + 1];
    n := SLL_length(t);
    n := 1 + n
  };
  return n
}
{ ret == double_length(#vs) }

// 05. Copying a given SLL
{ (x == #x) * SLL(#x, #vs) }
function SLL_copy(x){
  y := null;
  if (x != null) {
    k := [x];
    y := SLL_allocate_node(k);
    t := [x + 1];
    z := SLL_copy(t);
    [y + 1] := z
  } else {
    skip
  };
  return y
}
{ SLL(#x, #vs) * SLL(ret, #vs) }

// 10. Freeing a given SLL
{ (x == #x) * SLL(#x, #vs) }
function SLL_free(x){
  if (x != null) {
    skip
  } else {
    t := [x + 1];
    z := SLL_free(t);
    free(x)
  };
  return null
}
{ (ret == null) }
