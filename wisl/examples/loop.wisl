
predicate list(+x, alpha) {
    (x == null) * (alpha == nil);
    (x -> #a, #z) * (alpha == #a :: #beta) * list(#z, #beta)
}

predicate lseg(+x, +y, alpha) {
  (x == y) * (alpha == nil);
  (x -> #a, #z) * (alpha == #a :: #beta) * lseg(#z, y, #beta)
}

lemma lseg_to_list {
  statement:
    forall x, alpha.
      lseg(x, null, alpha) |- list(x, alpha)

  variant: len alpha

  proof: unfold lseg(#x, null, #alpha);
         if (#x = null) {
           fold list(#x, #alpha)
         } else {
           assert {exists: #next, #beta} (#x + 1 -> #next) * lseg(#next, null, #beta);
           apply lseg_to_list(#next, #beta);
           fold list(#x, #alpha)
         }
}

lemma lseg_append {
  statement:
    forall x, y, alpha, a, z.
      lseg(x, y, alpha) * (y -> a, z) |- lseg(x, z, alpha @ [a])

  variant: len alpha
  
  proof: unfold lseg(#x, #y, #alpha);
         if (#alpha = []) {
           fold lseg(#x, #z, #alpha @ [#a])
         } else {
           assert {exists: #next, #beta} (#x + 1 -> #next) * lseg(#next, #y, #beta);
           apply lseg_append(#next, #y, #beta, #a, #z); 
           fold lseg(#x, #z, #alpha @ [#a])
         } 
}

{ (x == #x) * list(#x, #alpha) }
function llen(x) {
  y := x;
  n := 0;
  [[ fold lseg(#x, y, []) ]];
  [[ invariant {exists: #a1, #a2} lseg(#x, y, #a1) * list(y, #a2) * (#alpha == #a1 @ #a2) * (n == len #a1) ]];
  while (not (y = null)) {
    [[ unfold list(y, #a2) ]];
    [[ assert {exists: #y, #b, #t} (y == #y) * (#y -> #b, #t) ]];
    y := [y+1];
    n := n+1;
    [[ apply lseg_append(#x, #y, #a1, #b, #t) ]]
  };
  [[ apply lseg_to_list(#x, #alpha) ]];
  return n
}
{ list(#x, alpha) * (ret == len(#alpha)) }
