import "archi64_constants.gil", "internals.gil",
       "global_environment_common.gil", "internal_casts.gil",
       "internal_binops.gil", "internal_unops.gil", "internal_stdlib.gil",
       "rust_allocation_internals.gil", "string.gil", "logic_common.gil",
       "archi64_logic.gil";


pred list(+p, alpha) : p__struct_ln(_lvar_i_0, _lvar_i_1, #head, #tail) *
  i__ptr(p, _lvar_i_0, _lvar_i_1) *
  i__malloced({{ _lvar_i_0, _lvar_i_1 }}, 16i) *
  (alpha == l+ ({{ #head }}, #beta)) * list(#tail, #beta), (p == 0i) *
  (alpha == {{  }});


@nopath
@internal
pred p__struct_ln(+loc : Obj, +ofs : Int, data : Int, next : List) :
  <mem_single>(loc, ofs, "i32"; data, "Freeable") *
  <mem_hole>(loc, (ofs i+ 4i), (ofs i+ 8i); "Freeable") * i__is_ptr(next) *
  <mem_single>(loc, (ofs i+ 8i), "u64"; next, "Freeable");

@nopath
@internal
proc "__CPROVER_initialize"() {
    ll := [mem_alloc](0i, 4i);
    loc := l-nth(ll, 0i);
    u := "i__store_zeros"(loc, 4i);
    u := "i__storev"("i32", {{ loc, 0i }}, 2i);
    u := [mem_dropperm](loc, 0i, 4i, "Writable");
    u := [genv_setsymbol]("m____CPROVER_malloc_failure_mode_assert_then_assume",
                          loc);
    u := [genv_setdef](loc, {{ "variable",
                       "m____CPROVER_malloc_failure_mode_assert_then_assume" }});
    ll := [mem_alloc](0i, 8i);
    loc := l-nth(ll, 0i);
    u := "i__store_zeros"(loc, 8i);
    u := "i__storev"("u64", {{ loc, 0i }}, 0i);
    u := [mem_dropperm](loc, 0i, 8i, "Writable");
    u := [genv_setsymbol]("__CPROVER_next_thread_id", loc);
    u := [genv_setdef](loc, {{ "variable", "__CPROVER_next_thread_id" }});
    ll := [mem_alloc](0i, 8i);
    loc := l-nth(ll, 0i);
    u := "i__store_zeros"(loc, 8i);
    u := "i__storev"("u64", {{ loc, 0i }}, 0i);
    u := [mem_dropperm](loc, 0i, 8i, "Writable");
    u := [genv_setsymbol]("m____CPROVER_malloc_object", loc);
    u := [genv_setdef](loc, {{ "variable", "m____CPROVER_malloc_object" }});
    ll := [mem_alloc](0i, 8i);
    loc := l-nth(ll, 0i);
    u := "i__store_zeros"(loc, 8i);
    u := "i__storev"("u64", {{ loc, 0i }}, 0i);
    u := [mem_dropperm](loc, 0i, 8i, "Writable");
    u := [genv_setsymbol]("__CPROVER_thread_id", loc);
    u := [genv_setdef](loc, {{ "variable", "__CPROVER_thread_id" }});
    ll := [mem_alloc](0i, 8i);
    loc := l-nth(ll, 0i);
    u := "i__store_zeros"(loc, 8i);
    u := "i__storev"("u64", {{ loc, 0i }}, 0i);
    u := [mem_dropperm](loc, 0i, 8i, "Writable");
    u := [genv_setsymbol]("__CPROVER_alloca_object", loc);
    u := [genv_setdef](loc, {{ "variable", "__CPROVER_alloca_object" }});
    ll := [mem_alloc](0i, 8i);
    loc := l-nth(ll, 0i);
    u := "i__store_zeros"(loc, 8i);
    u := "i__storev"("u64", {{ loc, 0i }}, 0i);
    u := [mem_dropperm](loc, 0i, 8i, "Writable");
    u := [genv_setsymbol]("__CPROVER_dead_object", loc);
    u := [genv_setdef](loc, {{ "variable", "__CPROVER_dead_object" }});
    ll := [mem_alloc](0i, 8i);
    loc := l-nth(ll, 0i);
    u := "i__store_zeros"(loc, 8i);
    u := [mem_dropperm](loc, 0i, 8i, "Writable");
    u := [genv_setsymbol]("m____CPROVER_malloc_size", loc);
    u := [genv_setdef](loc, {{ "variable", "m____CPROVER_malloc_size" }});
    ll := [mem_alloc](0i, 8i);
    loc := l-nth(ll, 0i);
    u := "i__store_zeros"(loc, 8i);
    u := "i__storev"("u64", {{ loc, 0i }}, 0i);
    u := [mem_dropperm](loc, 0i, 8i, "Writable");
    u := [genv_setsymbol]("__CPROVER_deallocated", loc);
    u := [genv_setdef](loc, {{ "variable", "__CPROVER_deallocated" }});
    ll := [mem_alloc](0i, 4i);
    loc := l-nth(ll, 0i);
    u := "i__store_zeros"(loc, 4i);
    u := "i__storev"("i32", {{ loc, 0i }}, 0i);
    u := [mem_dropperm](loc, 0i, 4i, "Writable");
    u := [genv_setsymbol]("__CPROVER_rounding_mode", loc);
    u := [genv_setdef](loc, {{ "variable", "__CPROVER_rounding_mode" }});
    ll := [mem_alloc](0i, 4i);
    loc := l-nth(ll, 0i);
    u := "i__store_zeros"(loc, 4i);
    u := "i__storev"("i32", {{ loc, 0i }}, 1i);
    u := [mem_dropperm](loc, 0i, 4i, "Writable");
    u := [genv_setsymbol]("m____CPROVER_malloc_failure_mode_return_null", loc);
    u := [genv_setdef](loc, {{ "variable",
                       "m____CPROVER_malloc_failure_mode_return_null" }});
    ll := [mem_alloc](0i, 4i);
    loc := l-nth(ll, 0i);
    u := "i__store_zeros"(loc, 4i);
    temp__0 := "i__cast_unsign_int_same_size"(0i, 2147483647i, 4294967296i);
    u := "i__storev"("u32", {{ loc, 0i }}, temp__0);
    u := [mem_dropperm](loc, 0i, 4i, "Writable");
    u := [genv_setsymbol]("__CPROVER_pipe_count", loc);
    u := [genv_setdef](loc, {{ "variable", "__CPROVER_pipe_count" }});
    ll := [mem_alloc](0i, 4i);
    loc := l-nth(ll, 0i);
    u := "i__store_zeros"(loc, 4i);
    u := [mem_dropperm](loc, 0i, 4i, "Writable");
    u := [genv_setsymbol]("__CPROVER_constant_infinity_uint", loc);
    u := [genv_setdef](loc, {{ "variable",
                       "__CPROVER_constant_infinity_uint" }});
    ll := [mem_alloc](0i, 8i);
    loc := l-nth(ll, 0i);
    u := "i__store_zeros"(loc, 8i);
    u := "i__storev"("u64", {{ loc, 0i }}, 0i);
    u := [mem_dropperm](loc, 0i, 8i, "Writable");
    u := [genv_setsymbol]("__CPROVER_next_thread_key", loc);
    u := [genv_setdef](loc, {{ "variable", "__CPROVER_next_thread_key" }});
    ll := [mem_alloc](0i, 8i);
    loc := l-nth(ll, 0i);
    u := "i__store_zeros"(loc, 8i);
    temp__1 := "i__cast_unsign_int_same_size"(36028797018963968i,
                                              9223372036854775807i,
                                              18446744073709551616i);
    u := "i__storev"("u64", {{ loc, 0i }}, temp__1);
    u := [mem_dropperm](loc, 0i, 8i, "Writable");
    u := [genv_setsymbol]("__CPROVER_max_malloc_size", loc);
    u := [genv_setdef](loc, {{ "variable", "__CPROVER_max_malloc_size" }});
    ll := [mem_alloc](0i, 8i);
    loc := l-nth(ll, 0i);
    u := "i__store_zeros"(loc, 8i);
    u := "i__storev"("u64", {{ loc, 0i }}, 0i);
    u := [mem_dropperm](loc, 0i, 8i, "Writable");
    u := [genv_setsymbol]("__CPROVER_memory_leak", loc);
    u := [genv_setdef](loc, {{ "variable", "__CPROVER_memory_leak" }});
    u := "i__glob_set_fun"("listLength", "listLength");
    ret := null;
    return
};


spec listLength(listLength__x)
  [[  list(#x, #alpha) * (listLength__x == #x)  ]]
  [[  list(#x, #alpha) *
      (ret == #r) *
      types(#r : Int) *
      (#r == (l-len #alpha))  ]]
  normal
proc listLength(listLength__x) {
       listLength__1__i := 0i;
       temp__0 := "i__binop_equal_maybe_ptr"(listLength__x, 0i);
       goto [temp__0] cc1 cc2;
  cc1: listLength__1__1__i := 2i;
       ret := 0i;
       goto ret;
  cc2: temp__1 := "i__loadv"("u64", {{ l-nth(listLength__x, 0i),
                             (l-nth(listLength__x, 1i) i+ 8i) }});
       temp__2 := "listLength"(temp__1);
       assert (((-2147483648i i<= (1i i+ temp__2)) and ((1i i+ temp__2) i<= 2147483647i)));
       ret := (1i i+ temp__2);
       goto ret;
  cc0: skip;
       skip;
       ret := undefined;
  ret: return
};
