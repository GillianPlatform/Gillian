
proc split_vector(x) {
    xtopslice := extract(31i, 16i, Bitvector(x, 32i): 16i);
    xbotslice := extract(15i, 0i, Bitvector(x, 32i): 16i);
    ret := {{ xtopslice, xbotslice }};
    return
};

proc main() {
    x := fresh_svar();
    y := fresh_svar();
    splitx := "split_vector"(x);
    splity := "split_vector"(y);
    xtopslice := l-nth(splitx,0i);
    xbotslice := l-nth(splitx,1i);
    ytopslice := l-nth(splity,0i);
    ybotslice := l-nth(splity,1i);

    newx := concat(Bitvector(xtopslice, 16i), Bitvector(ybotslice, 16i) : 32i);
    newy := concat(Bitvector(ytopslice, 16i), Bitvector(xbotslice, 16i) : 32i);

    sum0 := bvadd(Bitvector(x,32i), Bitvector(y,32i): 32i);
    sum1 := bvadd(Bitvector(newx,32i), Bitvector(newy,32i): 32i);
    ptrptr_l := [alloc](0i, 8i);
    ptrptr := l-nth(ptrptr_l, 0i);
    xptr_l := [alloc](0i, 32i);
    xptr := l-nth(xptr_l, 0i);
    xptr_with_offset := {{"ptr", {{ xptr, 0i }}}};
    b := [store]("i-or-ptr", ptrptr, 0i, xptr_with_offset);
    a := [store]("i-32", xptr, 0i, {{"int-32", sum0}});
    xptr2_l := [load]("i-or-ptr", ptrptr, 0i);
    typed_xptr2_l := l-nth(xptr2_l, 0i);
    xptr2_with_offset := l-nth(typed_xptr2_l, 1i);
    xptr2 := l-nth(xptr2_with_offset, 0i);
    xptr2_offset := l-nth(xptr2_with_offset, 1i);
    rtt_l_typed_l := [load]("i-32", xptr2, xptr2_offset);
    rtt_typed := l-nth(rtt_l_typed_l, 0i);
    rtt := l-nth(rtt_typed, 1i);
    assert((!(bvult(Bitvector(sum1, 32i), Bitvector(sum0, 32i):))));
    assert((rtt == sum1));
    ret := x;
    return
};
