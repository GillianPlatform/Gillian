(*************************
 *************************
 *******           *******
 *******   Field   *******
 *******           *******
 *************************
 *************************)

(*
    One header field consists of two bytes that contain the field length,
    encoded as a big-endian 16-bit integer, followed by the field contents

    buffer             fLength      field
    ----------------||----|----|---- ... ----||----------------
                readPos
*)
pred Field(+buffer : List, +readPos : Num, field : List, length : Num) :
  (0 <=# readPos) * (#rawFL == l-sub(buffer, readPos, 2)) *
    rawToUInt16(#rawFL, false, #fLength) *
    (field == l-sub(buffer, (readPos + 2), #fLength)) *
    (length == (2 + #fLength)) * ((readPos + length) <=# (l-len buffer));
  facts: (2 <=# length);


(******************************
 ******************************
 *******                *******
 *******   Incomplete   *******
 *******   Element      *******
 *******                *******
 ******************************
 ******************************)

(*
    An incomplete element (IElement) is an expected contiguous
    sequence of fields, but which exceeds the boundaries of the buffer.

    Either the length of the first field cannot be read:

                   buffer end
                     |    |
                     v    v
    buffer             fLength
    ----------------||----|----|
                readPos

    Or the first field itself cannot be read:

                                 buffer end
                                      |
                                      v
    buffer             fLength      field
    ----------------||----|----|---- ... ----|
                readPos

    Or the first field can be read, but the rest cannot:

                                  buffer end
                                      |
                                      v
    buffer              f1     f2           fn
    ----------------||------|------| ... |------|
                readPos
*)
@nopath
pred IElement(+buffer : List, +readPos : Num, +fCount : Num, fList : List, eLength : Num) :
  (* Base case: not enough data to read length of next field *)
  (0 <=# readPos) * (0 <# fCount) * (readPos <=# (l-len buffer)) *
    ((l-len buffer) <# (readPos + 2)) * (fList == {{  }}) *
    (eLength == ((l-len buffer) - readPos)),

  (* Base case: enough data to read length of next field, but not enough data to read next field *)
  (0 <=# readPos) * (0 <# fCount) * ((readPos + 2) <=# (l-len buffer)) *
    (#rawFL == l-sub(buffer, readPos, 2)) * rawToUInt16(#rawFL, false, #fLength) *
    ((l-len buffer) <# ((readPos + 2) + #fLength)) * (fList == {{  }}) *
    (eLength == ((l-len buffer) - (readPos + 2))),

  (* Recursive case: enough data to read one field, but not enough data to read the remaining ones *)
  (0 <=# readPos) * (1 <# fCount) * Field(buffer, readPos, #field, #fLength) *
    (#restFCount == (fCount - 1)) * ((readPos + #fLength) <=# (l-len buffer)) *
    IElement(buffer, (readPos + #fLength), #restFCount, #restFList, #restELength) *
    (fList == l+ ({{ #field }}, #restFList)) *
    (eLength == (#fLength + #restELength));

  (*
        An incomplete element must have a strictly positive number of fields,
        non-negative length, and must fit within the buffer
    *)
  facts: (0 <=# readPos) and (readPos <=# (l-len buffer)) and (0 <# fCount) and (0 <=# eLength);


(******************************
 ******************************
 *******                *******
 *******   Incomplete   *******
 *******   Elements     *******
 *******                *******
 ******************************
 ******************************)

(*
    An incomplete element sequence (IElements) is an expected contiguous
    sequence of elements, but which exceeds the boundaries of the buffer.

    Either the first element cannot be read:

                     buffer end
                         |
                         v
    buffer              ce1    ...    cen
    ----------------||-------| ... |-------||----------------
                readPos

    Or the first element can be read, but the rest cannot:

                           buffer end
                                |
                                v
    buffer              ce1    ...    cen
    ----------------||-------| ... |-------||----------------
                readPos
*)
@nopath
pred IElements(+buffer : List, +readPos : Num, +eCount : Num, +fCount : Num,
               eList : List, esLength : Num) :
  (* Base case: single incomplete element *)
  (0 <=# readPos) * (readPos <=# (l-len buffer)) * (0 <# eCount) * (0 <# fCount) *
    IElement(buffer, readPos, fCount, #fList, esLength) * (eList == {{  }}),

  (* Recursive case: enough data to read first element, but not enough data to read the remaining ones *)
  (0 <=# readPos) * (readPos <=# (l-len buffer)) * (1 <# eCount) * (0 <# fCount) *
    CElement(buffer, readPos, fCount, #fList, #eLength) *
    (#restECount == (eCount - 1)) *
    IElements(buffer, (readPos + #eLength), #restECount, fCount, #restEList, #restESLength) *
    (eList == l+ ({{ #fList }}, #restEList)) * (esLength == (#eLength + #restESLength));
  facts: (0 <=# readPos) and (readPos <=# (l-len buffer)) and (0 <# eCount) and (0 <# fCount) and (0 <=# esLength);



(****************************
 ****************************
 *******              *******
 *******   Complete   *******
 *******   Element    *******
 *******              *******
 ****************************
 ****************************)

(*
    A complete element (CElement) is a contiguous sequence of fields.

                    |------ length ------|

                        /--- fList ---\
    buffer              f1    ...    fn
    ----------------||------| ... |------||----------------
                readPos
*)
@nopath
pred CElement(+buffer : List, +readPos : Num, +fCount : Num, element : List, length : Num) :
  (0 <=# readPos) * (readPos <=# (l-len buffer)) *
    (fCount == 0) * (element == {{  }}) * (length == 0),
  (0 <# fCount) * Field(buffer, readPos, #field, #fLength) *
    (#restFCount == (fCount - 1)) *
    CElement(buffer, (readPos + #fLength), #restFCount, #restFields, #restLength) *
    (element == l+ ({{ #field }}, #restFields)) * (length == (#fLength + #restLength));
  (*
      A complete element has a non-negative number of fields
      and length, and must be correctly positioned within a buffer
  *)
  facts: (0 <=# readPos) and (0 <=# fCount) and (0 <=# length) and ((readPos + length) <=# (l-len buffer)) and ((l-len element) == fCount);


(****************************
 ****************************
 *******              *******
 *******   Complete   *******
 *******   Elements   *******
 *******              *******
 ****************************
 ****************************)

(*
    A complete element sequence (CElements) is a contiguous sequence of complete elements.

                    |------- length -------|

                       /--- elements ---\
    buffer              ce1    ...    cen
    ----------------||-------| ... |-------||----------------
                 readPos
*)
pred CElements(+buffer : List, +readPos : Num, +eCount : Num, +fCount : Num,
               elements : List, length : Num) :
  (0 <=# readPos) * (readPos <=# (l-len buffer)) * (eCount == 0) *
  (0 <# fCount) * (elements == {{  }}) * (length == 0),
  (0 <=# readPos) * (0 <# eCount) * (0 <# fCount) * (0 <# length) *
    CElement(buffer, readPos, fCount, #element, #eLength) * (#restECount == (eCount - 1)) *
    CElements(buffer, (readPos + #eLength), #restECount, fCount, #restElements, #restLength) *
    (elements == l+ ({{ #element }}, #restElements)) *
    (length == (#eLength + #restLength));
  (*
      Complete elements must have a non-negative number of
      elements with each element having at least one field,
      their length must be non-negative, and they must be
      correctly positioned within a buffer
  *)
  facts: (0 <=# readPos) and (0 <=# eCount) and (0 <# fCount) and (0 <=# length) and
         ((readPos + length) <=# (l-len buffer)) and (eCount == (l-len elements));


(****************************
 ****************************
 *******              *******
 *******   General    *******
 *******   Elements   *******
 *******              *******
 ****************************
 ****************************)


(* A general element sequene is either a complete or an incomplete element sequence *)
@nopath
nounfold pred Elements(definition : Str, +buffer : List, +readPos : Num,
                       +eCount : Num, +fCount : Num, eList : List,
                       esLength : Num) :
  (definition == "Complete") * CElements(buffer, readPos, eCount, fCount, eList, esLength),
  (definition == "Incomplete") * IElements(buffer, readPos, eCount, fCount, eList, esLength);
  facts: (0 <=# readPos) and (readPos <=# (l-len buffer)) and (0 <=# eCount) and (0 <# fCount) and (0 <=# esLength);

(*****************************
 *****************************
 *******               *******
 *******   Encrypted   *******
 *******   Data Keys   *******
 *******               *******
 *****************************
 *****************************)

(*
    Encrypted data keys (EKDs) are serialised by first providing the
    number of EDKs to follow, and then providing the EDKs themselves
    as a sequence of three-field elements

    buffer             keyCount       EDKs
    ----------------||-----|-----|---- ... ----||----------------
                readPos
*)

(* Complete serialised EDKs *)
@nopath
nounfold pred CRawEncryptedDataKeys(+buffer : List, +readPos : Num,
                                    EDKs : List, EDKsLength : Num) :
    (0 <=# readPos) * (readPos <=# (l-len buffer)) *
    (#rawEC == l-sub(buffer, readPos, 2)) *
    rawToUInt16(#rawEC, false, #keyCount) * (0 <# #keyCount) *
    Elements("Complete", buffer, (readPos + 2), #keyCount, 3, EDKs, #EDKsLength) *
    (EDKsLength == (#EDKsLength + 2));

(* Incomplete serialised EDKs *)
@nopath
nounfold pred IRawEncryptedDataKeys(buffer : List, readPos : Num) :
  (* Not enough data to read the number of EDKs *)
  (0 <=# readPos) * (readPos <=# (l-len buffer)) * ((l-len buffer) <# (readPos + 2)),

    (* Enough data to read the number of EDKs, but not enough data to read the EDKs *)
  (0 <=# readPos) * ((readPos + 2) <=# (l-len buffer)) * (#rawEC == l-sub(buffer, readPos, 2)) *
    rawToUInt16(#rawEC, false, #keyCount) * (0 <# #keyCount) *
    Elements("Incomplete", buffer, (readPos + 2), #keyCount, 3, #eList, #esLength);

(* Broken serialised EDKs *)
@nopath
nounfold pred BRawEncryptedDataKeys(errorMessage : Str, +buffer : List, +readPos : Num) :
  (* Incorrect starting position *)
  ((readPos <# 0) \/ ((l-len buffer) <# readPos)) *
    (errorMessage == "deserializeMessageHeader: startPos out of bounds."),

  (* Zero EDKs provided *)
  (0 <=# readPos) * ((readPos + 2) <=# (l-len buffer)) *
    (#rawEC == l-sub(buffer, readPos, 2)) * rawToUInt16(#rawEC, false, 0) *
    (errorMessage == "Malformed Header: No EncryptedDataKey found.");

(* General serialised EDKs *)
@nopath
nounfold pred RawEncryptedDataKeys(definition : Str, +buffer : List, +readPos : Num, EDKs : List, EDKsLength : Num, errorMessage : Str) :
  (definition == "Complete") * (errorMessage == "") * CRawEncryptedDataKeys(buffer, readPos, EDKs, EDKsLength),
  (definition == "Incomplete") * IRawEncryptedDataKeys(buffer, readPos) * (EDKs == {{  }}) * (EDKsLength == 0) * (errorMessage == ""),
  (definition == "Broken") * BRawEncryptedDataKeys(errorMessage, buffer, readPos) * (EDKs == {{  }}) * (EDKsLength == 0);


(******************************
 ******************************
 *******                *******
 *******   Encryption   *******
 *******   Context      *******
 *******                *******
 ******************************
 ******************************)

(*
    The encryption context (EC) are serialised
    as a sequence of two-field elements, and is meant
    to be the only contents of the provided buffer

  buffer     EC
     |----------------|
*)

(* Complete serialised encryption context *)
@nopath
nounfold pred CRawEncryptionContext(+buffer : List, ECKs : List) :
  ((l-len buffer) == 0) * (ECKs == {{  }}),
  (#rawKC == l-sub(buffer, 0, 2)) *
    rawToUInt16(#rawKC, false, #keyCount) * (0 <# #keyCount) *
    Elements("Complete", buffer, 2, #keyCount, 2, ECKs, #ECKsLength) *
    toUtf8PairMap(ECKs, #utf8ECKs) * FirstProj(ECKs, #ECKeys) *
    Unique(#ECKeys) * ((2 + #ECKsLength) == (l-len buffer));


(****************************
*****************************
*******               *******
*******   Algorithm   *******
*******   Suites      *******
*******               *******
*****************************
*****************************)

(* Correctly formed algorithm suite *)
@nopath
pred CAlgorithmSuite(+numId, stringId, ivLength, tagLength) :
  (numId == 20) * (stringId == "ALG_AES128_GCM_IV12_TAG16") *
    (ivLength == 12) * (tagLength == 128),
  (numId == 70) * (stringId == "ALG_AES192_GCM_IV12_TAG16") * (ivLength == 12) *
    (tagLength == 128);

(* Broken algorithm suite *)
@nopath
pred BAlgorithmSuite(+numId, errorMessage) :
  (! (numId == 20)) * (! (numId == 70)) *
  (errorMessage == "Malformed Header: Unsupported algorithm suite.");

(***************************
 ***************************
 *******             *******
 *******   Message   *******
 *******   Header    *******
 *******             *******
 ***************************
 ***************************)

(* The correct version and type *)
@nopath
pred CVersionAndType(version, type) :
  (version == 1) * (type == 128);


(* Serialised complete header *)
@nopath
nounfold pred CHeader(+rawHeaderData, part_one, version, type, suiteId,
                      messageId, ECLength, part_two, ECKs, part_three, EDKs,
                      contentType, headerIvLength, frameLength, headerLength,
                      headerIv, headerAuthTag) :
  (rawHeaderData == l+ (part_one, part_two)) *
    ((l-len part_one) == 22) *
    (part_one == l+ ({{ version, type }}, #rawSuiteId, messageId, #rawContextLength)) *
    ((l-len #rawSuiteId) == 2) *
    ((l-len messageId) == 16) *
    ((l-len #rawContextLength) == 2) * CVersionAndType(version, type) *
    rawToUInt16(#rawSuiteId, false, suiteId) *
    CAlgorithmSuite(suiteId, #stringId, headerIvLength, #tagLength) *
    rawToUInt16(#rawContextLength, false, ECLength) *
    (part_two == l+ (#EC, part_three)) *
    ((l-len #EC) == ECLength) *
    CRawEncryptionContext(#EC, ECKs) *
    (part_three == l+ (#edks, {{ contentType }}, {{ 0, 0, 0, 0 }}, {{ headerIvLength }}, #rawFrameLength, headerIv, headerAuthTag)) *
    RawEncryptedDataKeys("Complete", rawHeaderData, (22 + ECLength), EDKs, #EDKsLength, _) *
    (#EDKsLength == (l-len #edks)) * ((l-len #rawFrameLength) == 4) *
    rawToUInt32(#rawFrameLength, false, frameLength) *
    (headerLength == ((((((22 + ECLength) + #EDKsLength) + 1) + 4) + 1) + 4)) *
    ((l-len headerIv) == headerIvLength) *
    ((l-len headerAuthTag) == (#tagLength / 8)) *
    (((headerLength + headerIvLength) + (#tagLength / 8)) <=# (l-len rawHeaderData));