(************************************
 ************************************
 *******                      *******
 *******   Axiomatic          *******
 *******   UTF-8 Conversion   *******
 *******                      *******
 ************************************
 ************************************)


(*
    toUt8(rawData, utf8Data) is an abstract predicate which
    denotes that the string utf8Data is obtained by converting
    the raw bytes rawData to UTF-8 format
*)
@nopath
abstract pure nounfold pred toUtf8(+rawData : List, utf8Data : Str);

(* UTF-8 Mapping of lists of pairs *)
@nopath
pure pred toUtf8PairMap(+data : List, utf8Data : List) : (data == {{  }}) *
  (utf8Data == {{  }}),
  (data == l+ ({{ {{ #prop, #value }} }}, #rest)) *
    toUtf8(#prop, #utf8Prop) * toUtf8(#value, #utf8Value) *
    toUtf8PairMap(#rest, #utf8Rest) *
    (utf8Data == l+ ({{ {{ #utf8Prop, #utf8Value }} }}, #utf8Rest));

(* toUtf8 is injective *)
lemma toUtf8Injective(rawData1, utf8Data1, rawData2, utf8Data2)
[[
    toUtf8(#rawData1, #utf8Data1) * toUtf8(#rawData2, #utf8Data2)
]]
[[
    (#rawData1 == #rawData2) * (#utf8Data1 == #utf8Data2);
    (! (#rawData1 == #rawData2)) * (! (#utf8Data1 == #utf8Data2))
]]

(*
    fromUtf8(utf8Data, rawData) is an abstract predicate which
    denotes that the raw bytes rawData are obtained by converting
    the string utf8Data into bytes
*)
@nopath
abstract pure pred fromUtf8(+utf8Data:Str, rawData:List);

(* fromUtf8 is injective *)
lemma fromUtf8Injective(utf8Data1, rawData1, utf8Data2, rawData2)
[[
    fromUtf8(#utf8Data1, #rawData1) * fromUtf8(#utf8Data2, #rawData2)
]]
[[
    (#utf8Data1 == #utf8Data2) * (#rawData1 == #rawData2);
    (! (#utf8Data1 == #utf8Data2)) * (! (#rawData1 == #rawData2))
]]

(* Invertibility of toUtf8 with respect to fromUtf8 *)
lemma toUtf8fromUtf8(rawData)
[[
    toUtf8(#rawData, #utf8Data)
]]
[[
    fromUtf8(#utf8Data, #rawData)
]]

(* Invertibility of fromUtf8 with respect to toUtf8 *)
lemma fromUtf8toUtf8(utf8Data)
[[
    fromUtf8(#utf8Data, #rawData)
]]
[[
    toUtf8(#rawData, #utf8Data)
]]

(* UTF-8 Mapping of lists *)
@nopath
pure pred toUtf8Map(+data : List, utf8Data : List) :
    (data == {{ }}) * (utf8Data == {{ }}),

    (data == l+ ({{ #fst }}, #rest)) *
    (toUtf8(#fst, #utf8Fst)) *
    toUtf8Map(#rest, #utf8Rest) *
    (utf8Data == l+ ({{ #utf8Fst }}, #utf8Rest));

(* toUtf8PairMap is injective *)
lemma toUtf8MapInjective(rawData1, utf8Data1, rawData2, utf8Data2)
[[
    toUtf8Map(#rawData1, #utf8Data1) * toUtf8Map(#rawData2, #utf8Data2)
]]
[[
    (#rawData1 == #rawData2) * (#utf8Data1 == #utf8Data2);
    (! (#rawData1 == #rawData2)) * (! (#utf8Data1 == #utf8Data2))
]]
[*
    unfold toUtf8Map(#rawData1, #utf8Data1);
    unfold toUtf8Map(#rawData2, #utf8Data2);
    if ((not (#rawData1 = {{ }})) and (not (#rawData2 = {{ }}))) then {
        sep_assert ((#rawData1 == l+ ({{ #rd1 }}, #restd1)) * (#rawData2 == l+ ({{ #rd2 }}, #restd2)) *
                    (#utf8Data1 == l+ ({{ #ut1 }}, #restu1)) * (#utf8Data2 == l+ ({{ #ut2 }}, #restu2)))
                    [bind: #rd1, #restd1, #rd2, #restd2, #ut1, #restu1, #ut2, #restu2];
        apply toUtf8Injective(#rd1, #ut1, #rd2, #ut2);
        apply toUtf8MapInjective(#restd1, #restu1, #restd2, #restu2)
    }
 *]

(* toUtf8PairMap is injective *)
lemma toUtf8PairMapInjective(rawData1, utf8Data1, rawData2, utf8Data2)
[[
    toUtf8PairMap(#rawData1, #utf8Data1) * toUtf8PairMap(#rawData2, #utf8Data2)
]]
[[
    (#rawData1 == #rawData2) * (#utf8Data1 == #utf8Data2);
    (! (#rawData1 == #rawData2)) * (! (#utf8Data1 == #utf8Data2))
]]
[*
    unfold toUtf8PairMap(#rawData1, #utf8Data1);
    unfold toUtf8PairMap(#rawData2, #utf8Data2);
    if ((not (#rawData1 = {{ }})) and (not (#rawData2 = {{ }}))) then {
        sep_assert ((#rawData1 == l+ ({{ {{ #p1, #v1 }} }}, #restd1)) * (#rawData2 == l+ ({{ {{ #p2, #v2 }} }}, #restd2)) *
                    (#utf8Data1 == l+ ({{ {{ #up1, #uv1 }} }}, #restu1)) * (#utf8Data2 == l+ ({{ {{ #up2, #uv2 }} }}, #restu2)))
                    [bind: #p1, #v1, #restd1, #p2, #v2, #restd2, #up1, #uv1, #restu1, #up2, #uv2, #restu2];
        apply toUtf8Injective(#p1, #up1, #p2, #up2);
        apply toUtf8Injective(#v1, #uv1, #v2, #uv2);
        apply toUtf8PairMapInjective(#restd1, #restu1, #restd2, #restu2)
    }
 *]

(* Appending a pair to a mapping of lists of pairs *)
lemma toUtf8PairMapAppendPair(data, utf8Data, prop, value)
[[
    toUtf8PairMap(#data, #utf8Data) *
    toUtf8(#prop, #utf8Prop) *
    toUtf8(#value, #utf8Value)
]]
[[
    toUtf8PairMap(l+ (#data, {{ {{ #prop, #value }} }}), l+ (#utf8Data, {{ {{ #utf8Prop, #utf8Value }} }}))
]]
[*
    unfold toUtf8PairMap(#data, #utf8Data);
    if (not (#data = {{ }})) then {
        sep_assert (#data == l+ ({{{{ #fProp, #fValue }}}}, #restPVPairs)) [bind: #fProp, #fValue, #restPVPairs];
        sep_assert (toUtf8PairMap(#restPVPairs, #restUtf8Data)) [bind: #restUtf8Data];
        apply toUtf8PairMapAppendPair(#restPVPairs, #restUtf8Data, #prop, #value)
    }
*]