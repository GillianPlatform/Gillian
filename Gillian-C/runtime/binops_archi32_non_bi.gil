#internal

proc i__binop_cmpu_le(v1, v2) {
        goto [ (l-nth(v1, 0i) = "int") and (l-nth(v2, 0i) = "int") ] bint else;
  bint: ret := "i__value_of_bool"(l-nth(v1, 1i) i<= l-nth(v2, 1i));
        return;
  else: goto [
            (typeOf(l-nth(v1, 0i)) = Obj)
        and (typeOf(l-nth(v2, 0i)) = Obj)
        and (l-nth(v1, 0i) = l-nth(v2, 0i))
        ] smbl unde; (* tests if both are pointers withing the same block *)
  smbl: t1 := "i__weak_valid_ptr"(l-nth(v1, 0i), l-nth(v1, 1i));
        t2 := "i__weak_valid_ptr"(l-nth(v2, 0i), l-nth(v2, 1i));
        goto [ t1 and t2 ] cmpr unde;
  cmpr: ret := "i__value_of_bool"(l-nth(v1, 1i) i<= l-nth(v2, 1i));
        return;
  unde: fail[comparison]("Cannot compare non-comparable values")
};

proc i__binop_cmpu_eq(v1, v2) {
        goto [ (l-nth(v1, 0i) = "int") and (l-nth(v2, 0i) = "int") ] blon els1;
  blon: ret := "i__value_of_bool"(l-nth(v1, 1i)= l-nth(v2, 1i));
        return;
  els1: goto [
            (typeOf(l-nth(v1, 0i)) = Obj)
        and (typeOf(l-nth(v2, 0i)) = Obj)
        ] bobj els2; (* tests if both are pointers withing the same block *)
  bobj: goto [ (l-nth(v1, 0i) = l-nth(v2, 0i)) ] smbl dfbl;
  smbl: t1 := "i__weak_valid_ptr"(l-nth(v1, 0i), l-nth(v1, 1i));
        t2 := "i__weak_valid_ptr"(l-nth(v2, 0i), l-nth(v2, 1i));
        goto [ t1 and t2 ] cmpr unde;
  cmpr: ret := "i__value_of_bool"(l-nth(v1, 1i) = l-nth(v2, 1i));
        return;
  dfbl: t1 := "i__valid_pointer"(l-nth(v1, 0i), l-nth(v1, 1i));
        t2 := "i__valid_pointer"(l-nth(v2, 0i), l-nth(v2, 1i));
        goto [ t1 and t2 ] refl unde;
  els2: goto [ (typeOf(l-nth(v1, 0i)) = Obj) and (l-nth(v2, 0i) = "int") ] lprl els3;
  lprl: v1weak := "i__weak_valid_ptr"(l-nth(v1, 0i), l-nth(v1, 1i));
        goto [ (l-nth(v2, 1i) = 0i) and v1weak ] refl unde;
  els3: goto [ (typeOf(l-nth(v2, 0i)) = Obj) and (l-nth(v1, 0i) = "int") ] llrp unde;
  llrp: v2weak := "i__weak_valid_ptr"(l-nth(v2, 0i), l-nth(v2, 1i));
        goto [ (l-nth(v1, 1i) = 0i) and v2weak ] refl unde; 
  refl: ret := {{ "int", 0i }};
        return;     
  unde: fail[comparison]("Cannot compare non-comparable values")
};