#internal

(* Type testers *)

pred i__is_int (e: List):
  (e == {{ "int", #k }}) * types(#k : Num);

pred i__is_long (e: List):
  (e == {{ "long", #k }}) * types(#k : Num);

pred i__is_single (e: List):
  (e == {{ "single", #k }}) * types(#k : Num);

pred i__is_float (e: List):
  (e == {{ "float", #k }}) * types(#k : Num);

pred i__is_ptr_to_0 (e: List):
  (e == {{ #loc, 0. }}) *
  types(#loc : Obj);

pred i__is_ptr (e: List):
  (e == {{ #loc, #ofs }}) *
  types(#loc : Obj, #ofs : Num);

(* Actual value getters *)

pred i__int (+e: List, k : Num):
  (e == {{ "int", k }});

pred i__long (+e: List, k : Num):
  (e == {{ "long", k }});

pred i__single (+e: List, k : Num):
  (e == {{ "single", k }});

pred i__float (+e: List, k : Num):
  (e == {{ "float", k }});

pred i__ptr_to_0 (+e : List, l : Obj):
  (e == {{ l, 0. }});

pred i__ptr (+e: List, l: Obj, o: Num):
  (e == {{ l, o }});

(* arrays *)

pred i__zeros_ptr_size(+ptr: List, +size: Num):
  i__ptr(ptr, #l, #o) *
  <mem_zeros>(#l, #o, #o + size; "Freeable");

pred i__undefs_ptr_size(+ptr: List, +size: Num):
  i__ptr(ptr, #l, #o) *
  <mem_hole>(#l, #o, #o + size; "Freeable");

pred i__array_ptr(+ptr: List, +size: Num, +chk: Str, content: List):
  i__ptr(ptr, #l, #o) * (size == l-len content) * (0 <=# size) *
  <mem_array>(#l, #o, size, chk; content, "Freeable");

(* Pointer arithmetic *)

pred i__ptr_add(+ptr: List, +to_add:Num, res: List):
  i__ptr(ptr, #l, #o) *
  (res == {{ #l, #o + to_add }});

(* Global environment *)

pred i__function_ptr(+s: Str, p : List):
  i__ptr_to_0(p, #l) * <genv_symb>(s; #l) *
  <genv_def>(#l; {{ "function" , _ }});