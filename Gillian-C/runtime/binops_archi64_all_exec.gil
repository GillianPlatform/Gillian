internal;

proc i__binop_add(v1, v2) {
        goto [ l-nth(v1, 0.) = "int" ] lint unde;
  lint: goto [ l-nth(v2, 0.) = "int" ] bint unde;
  bint: ret := {{ "int", l-nth(v1, 1.) + l-nth(v2, 1.) }};
        return;
  unde: ret := undefined;
        return
};

proc i__binop_addl(v1, v2) {
        goto [ l-nth(v1, 0.) = "long" ] llon loth;
  llon: goto [ l-nth(v2, 0.) = "long" ] blon llro;
  blon: ret := {{ "long", l-nth(v1, 1.) + l-nth(v2, 1.) }};
        return;
  llro: goto [ typeOf(l-nth(v2, 0.)) = Obj ] llrp unde;
  llrp: ret := {{ l-nth(v2, 0.), l-nth(v1, 1.) + l-nth(v2, 1.) }};
        return;
  loth: goto [ typeOf(l-nth(v1, 0.)) = Obj ] lptr unde;
  lptr: goto [ l-nth(v2, 0.) = "long" ] lprl unde;
  lprl: ret := {{ l-nth(v1, 0.), l-nth(v1, 1.) + l-nth(v2, 1.) }};
        return;
  unde: ret := undefined;
        return
};

proc i__binop_subl(v1, v2) {
        goto [ l-nth(v1, 0.) = "long" ] llon loth;
  llon: goto [ l-nth(v2, 0.) = "long" ] blon llro;
  blon: ret := {{ "long", l-nth(v1, 1.) - l-nth(v2, 1.) }};
        return;
  llro: goto [ typeOf(l-nth(v2, 0.)) = Obj ] llrp unde;
  llrp: ret := {{ l-nth(v2, 0.), l-nth(v1, 1.) - l-nth(v2, 1.) }};
        return;
  loth: goto [ typeOf(l-nth(v1, 0.)) = Obj ] lptr unde;
  lptr: goto [ l-nth(v2, 0.) = "long" ] lprl unde;
  lprl: ret := {{ l-nth(v1, 0.), l-nth(v1, 1.) - l-nth(v2, 1.) }};
        return;
  unde: ret := undefined;
        return
};

proc i__binop_sub(v1, v2) {
        goto [ l-nth(v1, 0.) = "int" ] lint unde;
  lint: goto [ l-nth(v2, 0.) = "int" ] bint unde;
  bint: ret := {{ "int", l-nth(v1, 1.) - l-nth(v2, 1.) }};
        return;
  unde: ret := undefined;
        return
};

proc i__binop_cmpu_eq(v1, v2) {
        goto [ (l-nth(v1, 0.) = "int") and (l-nth(v2, 0.) = "int") ] bint unde;
  bint: ret := "i__value_of_bool"(l-nth(v1, 1.) = l-nth(v2, 1.));
        return;
  unde: fail[comparison]("Cannot compare non-comparable values")
};

proc i__binop_cmpu_le(v1, v2) {
        goto [ (l-nth(v1, 0.) = "int") and (l-nth(v2, 0.) = "int") ] bint unde;
  bint: ret := "i__value_of_bool"(l-nth(v1, 1.) <= l-nth(v2, 1.));
        return;
  unde: fail[comparison]("Cannot compare non-comparable values")
};
