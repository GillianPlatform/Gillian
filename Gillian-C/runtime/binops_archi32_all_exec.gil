internal;

proc i__binop_add(v1, v2) {
        goto [ l-nth(v1, 0.) = "int" ] lint loth;
  lint: goto [ l-nth(v2, 0.) = "int" ] bint liro;
  bint: ret := {{ "int", l-nth(v1, 1.) + l-nth(v2, 1.) }};
        return;
  liro: goto [ typeOf(l-nth(v2, 0.)) = Obj ] lirp unde;
  lirp: ret := {{ l-nth(v2, 0.), l-nth(v1, 1.) + l-nth(v2, 1.) }};
        return;
  loth: goto [ typeOf(l-nth(v1, 0.)) = Obj ] lptr unde;
  lptr: goto [ l-nth(v2, 0.) = "int" ] lpri unde;
  lpri: ret := {{ l-nth(v1, 0.), l-nth(v1, 1.) + l-nth(v2, 1.) }};
        return;
  unde: ret := undefined;
        return
};


proc i__binop_addl(v1, v2) {
        goto [ l-nth(v1, 0.) = "long" ] llon unde;
  llon: goto [ l-nth(v2, 0.) = "long" ] blon unde;
  blon: ret := {{ "long", l-nth(v1, 1.) + l-nth(v2, 1.) }};
        return;
  unde: ret := undefined;
        return
};

proc i__binop_subl(v1, v2) {
        goto [ l-nth(v1, 0.) = "long" ] llon unde;
  llon: goto [ l-nth(v2, 0.) = "long" ] blon unde;
  blon: ret := {{ "long", l-nth(v1, 1.) - l-nth(v2, 1.) }};
        return;
  unde: ret := undefined;
        return
};

proc i__binop_sub(v1, v2) {
        goto [ l-nth(v1, 0.) = "int" ] lint loth;
  lint: goto [ l-nth(v2, 0.) = "int" ] bint liro;
  bint: ret := {{ "int", l-nth(v1, 1.) - l-nth(v2, 1.) }};
        return;
  liro: goto [ typeOf(l-nth(v2, 0.)) = Obj ] lirp unde;
  lirp: ret := {{ l-nth(v2, 0.), l-nth(v1, 1.) - l-nth(v2, 1.) }};
        return;
  loth: goto [ typeOf(l-nth(v1, 0.)) = Obj ] lptr unde;
  lptr: goto [ l-nth(v2, 0.) = "int" ] lpri unde;
  lpri: ret := {{ l-nth(v1, 0.), l-nth(v1, 1.) - l-nth(v2, 1.) }};
        return;
  unde: ret := undefined;
        return
};

proc i__binop_cmplu_le(v1, v2) {
        goto [ l-nth(v1, 0.) = "long" ] llon unde;
  llon: goto [ l-nth(v2, 0.) = "long" ] blon unde;
  blon: ret := "i__value_of_bool"(l-nth(v1, 1.) <= l-nth(v2, 1.));
        return;
  unde: fail[comparison]("Using comparison for long values on non-long values");
};


proc i__binop_cmplu_eq(v1, v2) {
        goto [ (l-nth(v1, 0.) = "long") and (l-nth(v2, 0.) = "long") ] blon unde;
  blon: ret := "i__value_of_bool"(l-nth(v1, 1.) = l-nth(v2, 1.));
        return;
  unde: fail[comparison]("Cannot compare non-comparable values")
};