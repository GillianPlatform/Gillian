spec i__calloc(vnelem, velsize)
      [[ (vnelem == {{ "long", #n }}) *
         (velsize == {{ "long", #sz }}) ]]
      [[ (ret == {{ #loc, 0i }}) *
         types(#loc: Obj) *
         (#bytes == #n i* #sz) *
         <mem_zeros>(#loc, 0i, #bytes; "Freeable") *
         <mem_single>(#loc, -4i, "int64"; {{ "long", #bytes }}, "Freeable" ) *
         <mem_bounds>(#loc; {{ -4i, #bytes }}) ]]
      normal
proc i__calloc(vnelem, velsiz) {
      nelem := "i__alloc_size"(vnelem);
      elsiz := "i__alloc_size"(velsiz);
      sz := nelem i* elsiz;
      bl := [mem_alloc](-4i, sz);
      b := l-nth(bl, 0i);
      u := [mem_store]("int64", b, -4i, {{ "long", sz }});
      i := "i__init_to_zero"(b, 0i, sz);
      ret := {{ b, 0i }};
      return
};