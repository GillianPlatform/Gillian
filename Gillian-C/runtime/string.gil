internal;

proc i__strcmp(str1, str2) {
          goto [((typeOf str1) = List) and ((typeOf str2) = List) and
                ((typeOf (l-nth(str1, 0.))) = Obj) and ((typeOf (l-nth(str2, 0.))) = Obj)]
                ctn die; (* Check that we have pointers *)
    ctn:  i := 0;
    loop: char1_ar := [mem_load]("int8signed", l-nth(str1, 0.), l-nth(str1, 1.) + i);
          char2_ar := [mem_load]("int8signed", l-nth(str2, 0.), l-nth(str2, 1.) + i);
          char1 := l-nth(char1_ar, 0.);
          char2 := l-nth(char2_ar, 0.);
          goto [ (char1 = {{ "int", 0. }}) and (char2 = {{ "int", 0. }}) ] end ctnl;
    ctnl: goto [ l-nth(char1, 1.) = l-nth(char2, 1.) ] eq neq;
    neq:  ret := {{ "int", l-nth(char1, 1.) - l-nth(char2, 1.) }};
          return;
    eq:   i := i + 1;
          goto loop;
    end:  ret := {{ "int", 0. }};
          return;
    die:  fail[TypeError](str1, str2)
};

proc i__strlen(str) {
          goto [((typeOf str) = List) and ((typeOf (l-nth(str, 0.))) = Obj)]
                ctn die; (* Check that we have pointers *)
    ctn:  i := 0;
    loop: char_v := [mem_load]("int8signed", l-nth(str, 0.), l-nth(str, 1.) + i);
          char := l-nth(char_v, 0.);
          goto [ (char = {{ "int", 0. }}) ] end ctnl;
    ctnl: i := i + 1;
          goto loop;
    end:  ret := {{ "long", i }};
          return;
    die:  fail[TypeError](str)
};

proc i__strcpy(str1, str2) {
          goto [((typeOf str1) = List) and ((typeOf str2) = List) and
                ((typeOf (l-nth(str1, 0.))) = Obj) and ((typeOf (l-nth(str2, 0.))) = Obj)]
                ctn die; (* Check that we have pointers *)
    ctn:  i := 0;
    loop: char2_ar := [mem_load]("int8signed", l-nth(str2, 0.), l-nth(str2, 1.) + i);
          char2 := l-nth(char2_ar, 0.);
          u := [mem_store]("int8signed", l-nth(str1, 0.), l-nth(str1, 1.) + i, char2);
          goto [ (char2 = {{ "int", 0. }}) ] end ctnl;
    ctnl: i := i + 1;
          goto loop;
    end:  ret := str1;
          return;
    die:  fail[TypeError](str1, str2)
};