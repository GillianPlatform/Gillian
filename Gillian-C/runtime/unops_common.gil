(* These are not correct at all if the values get any higher.. *)
#internal

proc i__unop_longofint (i) {
       goto [ l-nth(i, 0.) = "int" ] ctn und;
  ctn: ret := {{ "long", l-nth(i, 1.) }};
       return;
  und: ret := undefined;
       return
};

proc i__unop_intoflong (i) {
       goto [ i = undefined ] und nm;
  nm:  goto [ l-nth(i, 0.) = "long" ] ctn und;
  ctn: ret := {{ "int", l-nth(i, 1.) }};
       return;
  und: ret := undefined;
       return
};

proc i__unop_intoffloat (i) {
       goto [ i = undefined ] und nm;
  nm:  goto [ l-nth(i, 0.) = "float" ] ctn und;
  ctn: ret := {{ "int", num_to_int l-nth(i, 1.) }};
       return;
  und: ret := undefined;
       return
};

proc i__unop_intofsingle (i) {
       goto [ i = undefined ] und nm;
  nm:  goto [ l-nth(i, 0.) = "single" ] ctn und;
  ctn: ret := {{ "int", num_to_int l-nth(i, 1.) }};
       return;
  und: ret := undefined;
       return
};

proc i__unop_longofintu (i) {
       goto [ l-nth(i, 0.) = "int" ] ctn und;
  ctn: ret := {{ "long", l-nth(i, 1.) }};
       return;
  und: ret := undefined;
       return
};

proc i__unop_singleoflongu (i) {
       goto [ l-nth(i, 0.) = "long" ] ctn und;
  ctn: ret := {{ "single", l-nth(i, 1.) }};
       return;
  und: ret := undefined;
       return
};

proc i__unop_singleofint (i) {
       goto [ l-nth(i, 0.) = "int" ] ctn und;
  ctn: ret := {{ "single", l-nth(i, 1.) }};
       return;
  und: ret := undefined;
       return
};

proc i__unop_singleoffloat (i) {
       goto [ l-nth(i, 0.) = "float" ] ctn und;
  ctn: ret := {{ "single", l-nth(i, 1.) }};
       return;
  und: ret := undefined;
       return
};

proc i__unop_floatofsingle (i) {
       goto [ l-nth(i, 0.) = "single" ] ctn und;
  ctn: ret := {{ "float", l-nth(i, 1.) }};
       return;
  und: ret := undefined;
       return
};

proc i__unop_longoffloat (i) {
       goto [ l-nth(i, 0.) = "float" ] ctn und;
  ctn: ret := {{ "long", l-nth(i, 1.) }};
       return;
  und: fail[cast]("Cannot use longoffloat on something that is not a float")
};

proc i__unop_longofsingle (i) {
       goto [ l-nth(i, 0.) = "single" ] ctn und;
  ctn: ret := {{ "long", l-nth(i, 1.) }};
       return;
  und: fail[cast]("Cannot use longofsingle on something that is not a single")
};

proc i__unop_longuofsingle (i) {
       goto [ l-nth(i, 0.) = "single" ] ctn und;
  ctn: ret := {{ "long", l-nth(i, 1.) }};
       return;
  und: fail[cast]("Cannot use longuofsingle on something that is not a single")
};

proc i__unop_floatofint (i) {
       goto [ l-nth(i, 0.) = "int" ] ctn und;
  ctn: ret := {{ "float", l-nth(i, 1.) }};
       return;
  und: fail[cast]("Cannot use floatofint on something that is not an int")
};

proc i__unop_floatofintu (i) {
       goto [ l-nth(i, 0.) = "int" ] ctn und;
  ctn: ret := {{ "float", l-nth(i, 1.) }};
       return;
  und: fail[cast]("Cannot use floatofint on something that is not an int")
};

proc i__unop_negl (i) {
       goto [ l-nth(i, 0.) = "long" ] ctn und;
  ctn: ret := {{ "long", - l-nth(i, 1.) }};
       return;
  und: ret := undefined;
       return
};

proc i__unop_negint (i) {
       goto [ l-nth(i, 0.) = "int" ] ctn und;
  ctn: ret := {{ "int", - l-nth(i, 1.) }};
       return;
  und: ret := undefined;
       return
};

proc i__unop_cast8signed (i) {
       goto [ l-nth(i, 0.) = "int" ] ctn und;
  ctn: ret := i;
       return;
  und: ret := undefined;
       return
};

proc i__unop_cast8unsigned (i) {
       goto [ l-nth(i, 0.) = "int" ] ctn und;
  ctn: ret := i;
       return;
  und: ret := undefined;
       return
};

proc i__unop_cast16signed (i) {
       goto [ l-nth(i, 0.) = "int" ] ctn und;
  ctn: ret := i;
       return;
  und: ret := undefined;
       return
};