(*************************
 *************************
 *******           *******
 *******   Field   *******
 *******           *******
 *************************
 *************************)

(*
    One header field consists of two bytes that contain the field length,
    encoded as a big-endian 16-bit integer, followed by the field contents

    buffer             fLength      field
    ----------------||----|----|---- ... ----||----------------
                readPos
*)
pred Field(+buffer : List, +readPos : Num, field : List, length : Num) :
    (0 <=# readPos) * (#rawFL == l-sub(buffer, readPos, 2)) *
    rawToUInt16(#rawFL, false, #fieldLength) *
    (field == l-sub(buffer, (readPos + 2), #fieldLength)) *
    (length == (2 + #fieldLength)) * ((readPos + length) <=# (l-len buffer));

    facts: (2 <=# length);


(******************************
 ******************************
 *******                *******
 *******   Incomplete   *******
 *******   Element      *******
 *******                *******
 ******************************
 ******************************)

(*
    An incomplete element (IElement) is an expected contiguous
    sequence of fields, but which exceeds the boundaries of the buffer.

    Either the length of the first field cannot be read:

                   buffer end
                     |    |
                     v    v
    buffer             fLength
    ----------------||----|----|
                readPos

    Or the first field itself cannot be read:

                                 buffer end
                                      |
                                      v
    buffer             fLength      field
    ----------------||----|----|---- ... ----|
                readPos

    Or the first field can be read, but the rest cannot:

                                  buffer end
                                      |
                                      v
    buffer              f1     f2           fn
    ----------------||------|------| ... |------|
                readPos
*)
@nopath
pred IElement(+buffer : List, +readPos : Num, +fCount : Num, fList : List, eLength : Num) :
  (* Base case: not enough data to read length of next field *)
  (0 <=# readPos) * (0 <# fCount) * (readPos <=# (l-len buffer)) *
    ((l-len buffer) <# (readPos + 2)) * (fList == {{  }}) *
    (eLength == ((l-len buffer) - readPos)),

  (* Base case: enough data to read length of next field, but not enough data to read next field *)
  (0 <=# readPos) * (0 <# fCount) * ((readPos + 2) <=# (l-len buffer)) *
    (#rawFL == l-sub(buffer, readPos, 2)) * rawToUInt16(#rawFL, false, #fLength) *
    ((l-len buffer) <# ((readPos + 2) + #fLength)) * (fList == {{  }}) *
    (eLength == ((l-len buffer) - (readPos + 2))),

  (* Recursive case: enough data to read one field, but not enough data to read the remaining ones *)
  (0 <=# readPos) * (1 <# fCount) * Field(buffer, readPos, #field, #fLength) *
    (#restFCount == (fCount - 1)) * ((readPos + #fLength) <=# (l-len buffer)) *
    IElement(buffer, (readPos + #fLength), #restFCount, #restFList, #restELength) *
    (fList == l+ ({{ #field }}, #restFList)) *
    (eLength == (#fLength + #restELength));

  (*
        An incomplete element must have a strictly positive number of fields,
        non-negative length, and must fit within the buffer
    *)
  facts: (0 <=# readPos) and (readPos <=# (l-len buffer)) and (0 <# fCount) and (0 <=# eLength);



(******************************
 ******************************
 *******                *******
 *******   Incomplete   *******
 *******   Elements     *******
 *******                *******
 ******************************
 ******************************)

(*
    An incomplete element sequence (IElements) is an expected contiguous
    sequence of elements, but which exceeds the boundaries of the buffer.

    Either the first element cannot be read:

                     buffer end
                         |
                         v
    buffer              ce1    ...    cen
    ----------------||-------| ... |-------||----------------
                readPos

    Or the first element can be read, but the rest cannot:

                           buffer end
                                |
                                v
    buffer              ce1    ...    cen
    ----------------||-------| ... |-------||----------------
                readPos
*)
@nopath
pred IElements(+buffer : List, +readPos : Num, +eCount : Num, +fCount : Num,
               eList : List, esLength : Num) :
  (* Base case: single incomplete element *)
  (0 <=# readPos) * (readPos <=# (l-len buffer)) * (0 <# eCount) * (0 <# fCount) *
    IElement(buffer, readPos, fCount, #fList, esLength) * (eList == {{  }}),

  (* Recursive case: enough data to read first element, but not enough data to read the remaining ones *)
  (0 <=# readPos) * (readPos <=# (l-len buffer)) * (1 <# eCount) * (0 <# fCount) *
    CElement(buffer, readPos, fCount, #fList, #eLength) *
    (#restECount == (eCount - 1)) *
    IElements(buffer, (readPos + #eLength), #restECount, fCount, #restEList, #restESLength) *
    (eList == l+ ({{ #fList }}, #restEList)) * (esLength == (#eLength + #restESLength));
  facts: (0 <=# readPos) and (readPos <=# (l-len buffer)) and (0 <# eCount) and (0 <# fCount) and (0 <=# esLength);



(****************************
 ****************************
 *******              *******
 *******   Complete   *******
 *******   Element    *******
 *******              *******
 ****************************
 ****************************)

(*
    A complete element (CElement) is a contiguous sequence of fields.

                    |------ length ------|

                        /--- fList ---\
    buffer              f1    ...    fn
    ----------------||------| ... |------||----------------
                readPos
*)
@nopath
pred CElement(+buffer : List, +readPos : Num, +fCount : Num, element : List, length : Num) :
  (0 <=# readPos) * (readPos <=# (l-len buffer)) *
    (fCount == 0) * (element == {{  }}) * (length == 0),
  (0 <# fCount) * Field(buffer, readPos, #field, #fLength) * ((typeOf #field) == List) *
    (#restFCount == (fCount - 1)) *
    CElement(buffer, (readPos + #fLength), #restFCount, #restFields, #restLength) *
    (element == l+ ({{ #field }}, #restFields)) * (length == (#fLength + #restLength));
  (*
      A complete element has a non-negative number of fields
      and length, and must be correctly positioned within a buffer
  *)
  facts: (0 <=# readPos) and (0 <=# fCount) and (0 <=# length) and ((readPos + length) <=# (l-len buffer)) and ((l-len element) == fCount)
         and ((0 <# length) \/ (fCount == 0));


(****************************
 ****************************
 *******              *******
 *******   Complete   *******
 *******   Elements   *******
 *******              *******
 ****************************
 ****************************)

(*
    A complete element sequence (CElements) is a contiguous sequence of complete elements.

                    |------- length -------|

                       /--- elements ---\
    buffer              ce1    ...    cen
    ----------------||-------| ... |-------||----------------
                 readPos
*)
pred CElements(+buffer : List, +readPos : Num, +eCount : Num, +fCount : Num,
               elements : List, length : Num) :
  (0 <=# readPos) * (readPos <=# (l-len buffer)) * (eCount == 0) *
    (0 <# fCount) * (elements == {{  }}) * (length == 0),
  (0 <=# readPos) * (0 <# eCount) * (0 <# fCount) * (0 <# length) *
    CElement(buffer, readPos, fCount, #element, #eLength) * (#restECount == (eCount - 1)) *
    CElements(buffer, (readPos + #eLength), #restECount, fCount, #restElements, #restLength) *
    (elements == l+ ({{ #element }}, #restElements)) *
    (length == (#eLength + #restLength));
  (*
      Complete elements must have a non-negative number of
      elements with each element having at least one field,
      their length must be non-negative, and they must be
      correctly positioned within a buffer
  *)
  facts: (0 <=# readPos) and (0 <=# eCount) and (0 <# fCount) and (0 <=# length) and
         ((readPos + length) <=# (l-len buffer)) and (eCount == (l-len elements));


lemma CElementNonEmptyPositiveLength(buffer, readPos, fCount, fList, eLength)
  [[  CElement(#buffer, #readPos, #fCount, #fList, #eLength) *
      (0 <# #fCount) ]]
  [[  CElement(#buffer, #readPos, #fCount, #fList, #eLength) *
      (0 <# #eLength) ]]
  (*
  [*  unfold CElement(#buffer, #readPos, #fCount, #fList, #eLength) ;
      sep_assert (Field(#buffer, #readPos, #field, #fLength)) [bind: #fLength];
      sep_assert (CElement(#buffer, (#readPos + #fLength), (#fCount - 1), #restFields, #restELength)) [bind: #restELength]  *]
  *)

lemma CElementsShift(buffer, readPos, eCount, fCount, shift)
  [[  CElements(#buffer, #readPos, #eCount, #fCount, #eList, #esLength) *
      (0 <=# (#readPos - #shift)) ]]
  [[  (#rBuffer == l-sub(#buffer, #shift, ((l-len #buffer) - #shift))) *
      CElements(#rBuffer, #readPos - #shift, #eCount, #fCount, #eList, #esLength) ]]

lemma IElementsShift(buffer, readPos, eCount, fCount, shift)
  [[  IElements(#buffer, #readPos, #eCount, #fCount, #eList, #esLength) *
      (0 <=# (#readPos - #shift)) ]]
  [[  (#rBuffer == l-sub(#buffer, #shift, ((l-len #buffer) - #shift))) *
      IElements(#rBuffer, #readPos - #shift, #eCount, #fCount, #eList, #esLength) ]]


nounfold pred Element(definition : Str, +buffer : List, +readPos : Num,
                      +fCount : Num, fList : List, eLength : Num) :
  (definition == "Complete") *
    CElement(buffer, readPos, fCount, fList, eLength),
  (definition == "Incomplete") *
    IElement(buffer, readPos, fCount, fList, eLength);

(****************************
 ****************************
 *******              *******
 *******   General    *******
 *******   Elements   *******
 *******              *******
 ****************************
 ****************************)


(* A general element sequene is either a complete or an incomplete element sequence *)
@nopath
nounfold pred Elements(definition : Str, +buffer : List, +readPos : Num,
                       +eCount : Num, +fCount : Num, eList : List,
                       esLength : Num) :
  (definition == "Complete") * CElements(buffer, readPos, eCount, fCount, eList, esLength),
  (definition == "Incomplete") * IElements(buffer, readPos, eCount, fCount, eList, esLength);
  facts: (0 <=# readPos) and (readPos <=# (l-len buffer)) and (0 <=# eCount) and (0 <# fCount) and (0 <=# esLength);

lemma ElementsShift(buffer, readPos, eCount, fCount, shift)
  [[  Elements(#definition, #buffer, #readPos, #eCount, #fCount, #eList, #esLength) *
      (0 <=# (#readPos - #shift)) ]]
  [[  (#rBuffer == l-sub(#buffer, #shift, ((l-len #buffer) - #shift))) *
      Elements(#definition, #rBuffer, #readPos - #shift, #eCount, #fCount, #eList, #esLength) ]]

(*****************************
 *****************************
 *******               *******
 *******   Encrypted   *******
 *******   Data Keys   *******
 *******               *******
 *****************************
 *****************************)

(*
    Encrypted data keys (EKDs) are serialised by first providing the
    number of EDKs to follow, and then providing the EDKs themselves
    as a sequence of three-field elements

    buffer             keyCount       EDKs
    ----------------||-----|-----|---- ... ----||----------------
                readPos
*)

(* Complete serialised EDKs *)
@nopath
nounfold pred CRawEncryptedDataKeys(+buffer : List, +readPos : Num,
                                    EDKs : List, EDKsLength : Num) :
    (0 <=# readPos) * (readPos <=# (l-len buffer)) *
    (#rawEC == l-sub(buffer, readPos, 2)) *
    rawToUInt16(#rawEC, false, #keyCount) * (0 <# #keyCount) *
    Elements("Complete", buffer, (readPos + 2), #keyCount, 3, EDKs, #EDKsLength) *
    (0 <# #EDKsLength) * (* This can be derived... *)
    (EDKsLength == (#EDKsLength + 2));

(* Incomplete serialised EDKs *)
@nopath
nounfold pred IRawEncryptedDataKeys(buffer : List, readPos : Num) :
  (* Not enough data to read the number of EDKs *)
  (0 <=# readPos) * (readPos <=# (l-len buffer)) * ((l-len buffer) <# (readPos + 2)),

    (* Enough data to read the number of EDKs, but not enough data to read the EDKs *)
  (0 <=# readPos) * ((readPos + 2) <=# (l-len buffer)) * (#rawEC == l-sub(buffer, readPos, 2)) *
    rawToUInt16(#rawEC, false, #keyCount) * (0 <# #keyCount) *
    Elements("Incomplete", buffer, (readPos + 2), #keyCount, 3, #eList, #esLength);

(* Broken serialised EDKs *)
@nopath
nounfold pred BRawEncryptedDataKeys(errorMessage : Str, +buffer : List, +readPos : Num, EDKs : List, EDKsLength : Num) :
    (* Incorrect starting position *)
    ((readPos <# 0) \/ ((l-len buffer) <# readPos)) *
    (errorMessage == "deserializeMessageHeader: startPos out of bounds.") *
    (EDKs == {{ }}) * (EDKsLength == 0),

    (* Zero EDKs provided *)
    (0 <=# readPos) * ((readPos + 2) <=# (l-len buffer)) *
    (#rawEC == l-sub(buffer, readPos, 2)) * rawToUInt16(#rawEC, false, 0) *
    (EDKs == {{ }}) * (EDKsLength == 2) *
    (errorMessage == "Malformed Header: No EncryptedDataKey found.");

(* General serialised EDKs *)
@nopath
nounfold pred RawEncryptedDataKeys(definition : Str, +buffer : List, +readPos : Num, EDKs : List, EDKsLength : Num, errorMessage : Str) :
  (definition == "Complete")   * (errorMessage == "") * CRawEncryptedDataKeys(buffer, readPos, EDKs, EDKsLength),
  (definition == "Incomplete") * (errorMessage == "") * IRawEncryptedDataKeys(buffer, readPos) * (EDKs == {{  }}) * (EDKsLength == 0),
  (definition == "Broken") * BRawEncryptedDataKeys(errorMessage, buffer, readPos, EDKs, EDKsLength);


(******************************
 ******************************
 *******                *******
 *******   Encryption   *******
 *******   Context      *******
 *******                *******
 ******************************
 ******************************)

(*
    The encryption context (EC) are serialised
    as a sequence of two-field elements, and is meant
    to be the only contents of the provided buffer

  buffer     EC
     |----------------|
*)

(* Complete serialised encryption context *)
@nopath
nounfold pred CRawEncryptionContext(+buffer : List, ECKs : List) :
  (* ((l-len buffer) == 0) * (ECKs == {{  }}), *)
  (0 <# l-len buffer) * (#rawKC == l-sub(buffer, 0, 2)) *
    rawToUInt16(#rawKC, false, #keyCount) * (0 <# #keyCount) *
    Elements("Complete", buffer, 2, #keyCount, 2, ECKs, #ECKsLength) *
    toUtf8PairMap(ECKs, #utf8ECKs) * FirstProj(ECKs, #ECKeys) *
    Unique(#ECKeys) * ((2 + #ECKsLength) == (l-len buffer));

(* Broken serialised encryption context *)
pure nounfold pred BRawEncryptionContext(errorMessage:Str, +buffer:List, ECKs:List) :
    (* Not enough data provided *)
    (buffer == l+ ({{ #kc0, #kc1 }}, #rest)) *
    rawToUInt16({{ #kc0, #kc1 }}, false, #keyCount) *
    (0 <# #keyCount) * (ECKs == {{ }}) *
    Elements("Incomplete", buffer, 2, #keyCount, 2, #eList, #esLength) *
    toUtf8PairMap(#eList, #utf8EList) * FirstProj(#eList, #keys) *
    Unique(#keys) *
    (errorMessage == "decodeEncryptionContext: Underflow, not enough data."),

    (* Not enough data to read the key_count *)
    (l-len buffer == 1) * (ECKs == {{ }}) *
    (errorMessage == "decodeEncryptionContext: Not enough data to read key count."),

    (* keyCount is 0 *)
    (buffer == l+ ({{ 0, 0 }}, #rest)) * (ECKs == {{ }}) *
    (errorMessage == "decodeEncryptionContext: Key Count is 0."),

    (* Too much data provided *)
    (buffer == l+ ({{ #kc0, #kc1 }}, #rest)) *
    rawToUInt16({{ #kc0, #kc1 }}, false, #keyCount) *
    (0 <# #keyCount) *
    Elements("Complete", buffer, 2, #keyCount, 2, ECKs, #ECKsLength) *
    toUtf8PairMap(ECKs, #utf8ECKs) * FirstProj(ECKs, #ECKeys) * Unique(#ECKeys) *
    (! (#ECKsLength + 2 == l-len buffer)) *
    (errorMessage == "decodeEncryptionContext: Overflow, too much data."),

    (* Duplicated key in context *)
    (buffer == l+ ({{ #kc0, #kc1 }}, #rest)) *
    rawToUInt16({{ #kc0, #kc1 }}, false, #keyCount) *
    (0 <# #keyCount) *
    Elements("Complete", buffer, 2, #keyCount, 2, ECKs, #ECKsLength) *
    toUtf8PairMap(ECKs, #utf8ECKs) * FirstProj(ECKs, #ECKeys) * Duplicated({{ }}, #ECKeys) *
    (errorMessage == "decodeEncryptionContext: Duplicate encryption context key value.");

(* General serialised encryption context *)
@nopath
pure nounfold pred RawEncryptionContext(definition:Str, +buffer:List, ECKs:List, errorMessage:Str) :
  (definition == "Complete") * CRawEncryptionContext(buffer, ECKs) * (errorMessage == ""),
  (definition == "Broken")   * BRawEncryptionContext(errorMessage, buffer, ECKs);

(****************************
*****************************
*******               *******
*******   Algorithm   *******
*******   Suites      *******
*******               *******
*****************************
*****************************)

(* Correctly formed algorithm suite *)
@nopath
nounfold pred CAlgorithmSuite(+numId, stringId, ivLength, tagLength) :
  (numId == 20)   * (stringId == "ALG_AES128_GCM_IV12_TAG16_NO_KDF")                 * (ivLength == 12) * (tagLength == 16),
  (numId == 70)   * (stringId == "ALG_AES192_GCM_IV12_TAG16_NO_KDF")                 * (ivLength == 12) * (tagLength == 16),
  (numId == 120)  * (stringId == "ALG_AES256_GCM_IV12_TAG16_NO_KDF")                 * (ivLength == 12) * (tagLength == 16),
  (numId == 276)  * (stringId == "ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256")            * (ivLength == 12) * (tagLength == 16),
  (numId == 326)  * (stringId == "ALG_AES192_GCM_IV12_TAG16_HKDF_SHA256")            * (ivLength == 12) * (tagLength == 16),
  (numId == 376)  * (stringId == "ALG_AES256_GCM_IV12_TAG16_HKDF_SHA256")            * (ivLength == 12) * (tagLength == 16),
  (numId == 532)  * (stringId == "ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256") * (ivLength == 12) * (tagLength == 16),
  (numId == 838)  * (stringId == "ALG_AES192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384") * (ivLength == 12) * (tagLength == 16),
  (numId == 888)  * (stringId == "ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384") * (ivLength == 12) * (tagLength == 16),
  (numId == 1144) * (stringId == "ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384") * (ivLength == 12) * (tagLength == 16),
  (numId == 1400) * (stringId == "ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384") * (ivLength == 12) * (tagLength == 16);

facts: (ivLength == 12) and (tagLength == 16);

(* Broken algorithm suite *)
@nopath
pred BAlgorithmSuite(+numId, errorMessage) :
  (! (numId == 20)) * (! (numId == 70)) * (! (numId == 120)) * (! (numId == 276)) * (! (numId == 326)) * (! (numId == 376)) *
  (! (numId == 532)) * (! (numId == 838)) * (! (numId == 888)) * (! (numId == 1144)) * (! (numId == 1400)) *
  (errorMessage == "Malformed Header: Unsupported algorithm suite.");

(****************************
*****************************
*******               *******
*******   Content     *******
*******   Type        *******
*******               *******
*****************************
*****************************)

(* Correctly formed algorithm suite *)
@nopath
pred CContentType(+contentType: Num) :
  (contentType == 1) \/ (contentType == 2);

(* Broken algorithm suite *)
@nopath
pred BContentType(+contentType) :
  (! (contentType == 1)) * (! (contentType == 2));

(* If type is NONFRAMED (i.e. = 1), frame_len has to be 0, otherwise, if type is FRAMED (i.e = 2), frame_len has to be > 0 *)
pred CompatibleContentTypeAndFrameLength(+contentType: Num, +frameLength: Num):
  ((contentType == 1) /\ (frameLength == 0)) \/ ((contentType == 2) /\ (0 <# frameLength));

pred IncompatibleContentTypeAndFrameLength(+contentType, +frameLength):
  ((contentType == 1) /\ (0 <# frameLength)) \/ ((contentType == 2) /\ (frameLength == 0));


(***************************
 ***************************
 *******             *******
 *******   Message   *******
 *******   Header    *******
 *******             *******
 ***************************
 ***************************)

(* The correct version and type *)
@nopath
pred CVersionAndType(version, type) :
  (version == 1) * (type == 128);

(* Broken version and type *)
nounfold pred BVersionAndType(+version:Num, +type:Num, errorMessage:Str) :
    (version == 65) * (type == 89) * (errorMessage == "Malformed Header: This blob may be base64 encoded."),
    (! (version == 1) \/ ! (type == 128)) * (! (version == 65) \/ ! (type == 89)) * (errorMessage == "Malformed Header: Unsupported version and/or type.");



(* Broken serialised header *)
nounfold pred BHeader(+rawHeaderData, part_one, version, type, suiteId, messageId, ECLength,
                                      part_two, ECKs,
                                      part_three, EDKs, contentType, headerIvLength, frameLength, headerLength, headerIv, headerAuthTag, ECDef, edkDef, errorMessage) :
    (* Incorrect version and/or type *)
    (22 <=# l-len rawHeaderData) *
    (rawHeaderData == l+ ({{ version, type }}, #rest)) *
    BVersionAndType(version, type, errorMessage) *

    (part_one == {{ }}) *
    (suiteId == 0) * (messageId == {{ }}) * (ECLength == 0) *
    (part_two == {{ }}) * (ECKs == {{ }}) * (ECDef == "") * (edkDef == "") *
    (part_three == {{ }}) * (EDKs == {{ }}) * (contentType == 0) * (headerIvLength == 0) *
    (frameLength == 0) * (headerLength == 0) * (headerIv == {{ }}) * (headerAuthTag == {{ }}),

    (* Unsupported algorithm suite *)
    (22 <=# l-len rawHeaderData) *
    (rawHeaderData == l+ ({{ version, type }}, #rawSuiteId, #rest)) *
    (l-len #rawSuiteId == 2) *
    CVersionAndType(version, type) *
    rawToUInt16(#rawSuiteId, false, suiteId) *
    BAlgorithmSuite(suiteId, errorMessage) *

    (part_one == {{ }}) * (messageId == {{ }}) * (ECLength == 0) *
    (part_two == {{ }}) * (ECKs == {{ }}) * (ECDef == "") * (edkDef == "") *
    (part_three == {{ }}) * (EDKs == {{ }}) * (contentType == 0) * (headerIvLength == 0) *
    (frameLength == 0) * (headerLength == 0) * (headerIv == {{ }}) * (headerAuthTag == {{ }}),

    (* Broken encryption context *)
    (22 <=# l-len rawHeaderData) *
    (rawHeaderData == l+ (part_one, part_two)) *
    (l-len part_one == 22) *
    (part_one == l+ ({{ version, type }}, #rawSuiteId, messageId, #rawContextLength)) *
    (l-len #rawSuiteId == 2) *
    (l-len messageId == 16) *
    (l-len #rawContextLength == 2) *
    CVersionAndType(version, type) *
    rawToUInt16(#rawSuiteId, false, suiteId) *
    CAlgorithmSuite(suiteId, #stringId, headerIvLength, #tagLength) *
    rawToUInt16(#rawContextLength, false, ECLength) *
    (22 + ECLength <=# l-len rawHeaderData) *
    (0 <# ECLength) *
    (part_two == l+ (#EC, part_three)) *
    (l-len #EC == ECLength) * (ECDef == "Broken") * (edkDef == "") *
    BRawEncryptionContext(errorMessage, #EC, ECKs) *

    (EDKs == {{ }}) * (contentType == 0) * (frameLength == 0) *
    (headerLength == 0) * (headerIv == {{ }}) * (headerAuthTag == {{ }}),

    (* Broken encrypted data keys *)
    (22 <=# l-len rawHeaderData) *
    (rawHeaderData == l+ (part_one, part_two)) *
    (l-len part_one == 22) *
    (part_one == l+ ({{ version, type }}, #rawSuiteId, messageId, #rawContextLength)) *
    (l-len #rawSuiteId == 2) *
    (l-len messageId == 16) *
    (l-len #rawContextLength == 2) *
    CVersionAndType(version, type) *
    rawToUInt16(#rawSuiteId, false, suiteId) *
    CAlgorithmSuite(suiteId, #stringId, headerIvLength, #tagLength) *
    rawToUInt16(#rawContextLength, false, ECLength) *
    (22 + ECLength <=# l-len rawHeaderData) *

    (part_two == l+ (#EC, part_three)) *
    (l-len #EC == ECLength) *
    CRawEncryptionContext(#EC, ECKs) * (ECDef == "") * (edkDef == "Broken") *
    RawEncryptedDataKeys("Broken", rawHeaderData, 22 + ECLength, EDKs, EDKsLength, errorMessage) *

    (contentType == 0) * (frameLength == 0) *
    (headerLength == 0) * (headerIv == {{ }}) * (headerAuthTag == {{ }}),

    (* Incorrect contentType *)
    (22 <=# l-len rawHeaderData) *
    (rawHeaderData == l+ (part_one, part_two)) *
    (l-len part_one == 22) *
    (part_one == l+ ({{ version, type }}, #rawSuiteId, messageId, #rawContextLength)) *
    (l-len #rawSuiteId == 2) *
    (l-len messageId == 16) *
    (l-len #rawContextLength == 2) *
    CVersionAndType(version, type) *
    rawToUInt16(#rawSuiteId, false, suiteId) *
    CAlgorithmSuite(suiteId, #stringId, headerIvLength, #tagLength) *
    rawToUInt16(#rawContextLength, false, ECLength) *
    (22 + ECLength <=# l-len rawHeaderData) *

    (part_two == l+ (#EC, part_three)) *
    (l-len #EC == ECLength) *
    CRawEncryptionContext(#EC, ECKs) * (ECDef == "") *
    (part_three == l+ (#edks, {{ contentType }}, #rest)) *
    RawEncryptedDataKeys("Complete", part_three, 0, EDKs, #EDKsLength, _) * (edkDef == "Complete") *
    (#EDKsLength == l-len #edks) *
    BContentType(contentType) *

    (errorMessage == "Malformed Header: Incorrect content type.") *
    (frameLength == 0) * (headerLength == 0) * (headerIv == {{ }}) * (headerAuthTag == {{ }}),

    (* Incorrect reserved bytes *)
    (22 <=# l-len rawHeaderData) *
    (rawHeaderData == l+ (part_one, part_two)) *
    (l-len part_one == 22) *
    (part_one == l+ ({{ version, type }}, #rawSuiteId, messageId, #rawContextLength)) *
    (l-len #rawSuiteId == 2) *
    (l-len messageId == 16) *
    (l-len #rawContextLength == 2) *
    CVersionAndType(version, type) *
    rawToUInt16(#rawSuiteId, false, suiteId) *
    CAlgorithmSuite(suiteId, #stringId, headerIvLength, #tagLength) *
    rawToUInt16(#rawContextLength, false, ECLength) *
    (22 + ECLength <=# l-len rawHeaderData) *

    (part_two == l+ (#EC, part_three)) *
    (l-len #EC == ECLength) *
    CRawEncryptionContext(#EC, ECKs) * (ECDef == "") *
    (part_three == l+ (#edks, {{ contentType }}, #rawReservedBytes, #rest)) *
    CContentType(contentType) *
    RawEncryptedDataKeys("Complete", part_three, 0, EDKs, #EDKsLength, _) * (edkDef == "Complete") *
    (#EDKsLength == l-len #edks) *
    (l-len #rawReservedBytes == 4) *
    rawToUInt32(#rawReservedBytes, false, #reservedBytes) *
    (! (#reservedBytes == 0)) *

    (errorMessage == "Malformed Header: Reserved bytes not equal to zero.") *
    (frameLength == 0) * (headerLength == 0) * (headerIv == {{ }}) * (headerAuthTag == {{ }}),

    (* IV length mismatch *)
    (22 <=# l-len rawHeaderData) *
    (rawHeaderData == l+ (part_one, part_two)) *
    (l-len part_one == 22) *
    (part_one == l+ ({{ version, type }}, #rawSuiteId, messageId, #rawContextLength)) *
    (l-len #rawSuiteId == 2) *
    (l-len messageId == 16) *
    (l-len #rawContextLength == 2) *
    CVersionAndType(version, type) *
    rawToUInt16(#rawSuiteId, false, suiteId) *
    CAlgorithmSuite(suiteId, #stringId, #ivLength, #tagLength) *
    rawToUInt16(#rawContextLength, false, ECLength) *
    (22 + ECLength <=# l-len rawHeaderData) *

    (part_two == l+ (#EC, part_three)) *
    (l-len #EC == ECLength) *
    CRawEncryptionContext(#EC, ECKs) * (ECDef == "") *
    (part_three == l+ (#edks, {{ contentType }}, {{ 0, 0, 0, 0 }}, {{ headerIvLength }}, #rest)) *
    CContentType(contentType) *
    RawEncryptedDataKeys("Complete", part_three, 0, EDKs, #EDKsLength, _) * (edkDef == "Complete") *
    (#EDKsLength == l-len #edks) *
    (! (headerIvLength == #ivLength)) *

    (errorMessage == "Malformed Header: Mismatch between expected and obtained IV length.") *
    (frameLength == 0) * (headerLength == 0 ) * (headerIv == {{ }}) * (headerAuthTag == {{ }}),

    (* Incompatible Content Type and Frame Length *)
    (rawHeaderData == l+ (part_one, part_two)) *
    ((l-len part_one) == 22) *
    (part_one == l+ ({{ version, type }}, #rawSuiteId, messageId, #rawContextLength)) *
    ((l-len #rawSuiteId) == 2) *
    ((l-len messageId) == 16) *
    ((l-len #rawContextLength) == 2) * CVersionAndType(version, type) *
    rawToUInt16(#rawSuiteId, false, suiteId) *
    CAlgorithmSuite(suiteId, #stringId, headerIvLength, #tagLength) *
    rawToUInt16(#rawContextLength, false, ECLength) *
    (part_two == l+ (#EC, part_three)) *
    ((l-len #EC) == ECLength) *
    CRawEncryptionContext(#EC, ECKs) *
    CContentType(contentType) * (ECDef == "") *
    (part_three == l+ (#edks, {{ contentType }}, {{ 0, 0, 0, 0 }},
                       {{ headerIvLength }}, #rawFrameLength, #rest)) *
    CRawEncryptedDataKeys(part_three, 0, EDKs, #EDKsLength) *
    (edkDef == "Complete") *
    (#EDKsLength == (l-len #edks)) * ((l-len #rawFrameLength) == 4) *
    rawToUInt32(#rawFrameLength, false, frameLength) *
    IncompatibleContentTypeAndFrameLength(contentType, frameLength);
    facts: (22 <=# l-len rawHeaderData);


(* Serialised incomplete header *)
nounfold pred IHeader(+rawHeaderData, part_one, version, type, suiteId, messageId, ECLength,
                                      part_two, ECKs,
                                      part_three, EDKs, contentType, headerIvLength, frameLength, headerLength, headerIv, headerAuthTag, edkDef) :

    (* Not enough data to read version *)
    (l-len rawHeaderData == 0) *
    (part_one == {{ }}) * (version == 0) * (type == 0) * (suiteId == 0) * (messageId == {{ }}) * (ECLength == 0) *
    (part_two == {{ }}) * (ECKs == {{ }}) * (edkDef == "") *
    (part_three == {{ }}) * (EDKs == {{ }}) * (contentType == 0) * (headerIvLength == 0) *
    (frameLength == 0) * (headerLength == 0) * (headerIv == {{ }}) * (headerAuthTag == {{ }}),

    (* Not enough data to read header type *)
    (rawHeaderData == part_one) *
    (part_one == {{ version }}) *
    (version == 1) * (type == 0) * (suiteId == 0) * (messageId == {{ }}) * (ECLength == 0) *
    (part_two == {{ }}) * (ECKs == {{ }}) * (edkDef == "") *
    (part_three == {{ }}) * (EDKs == {{ }}) * (contentType == 0) * (headerIvLength == 0) *
    (frameLength == 0) * (headerLength == 0) * (headerIv == {{ }}) * (headerAuthTag == {{ }}),

    (* Not enough data to read suite Id *)
    (rawHeaderData == part_one) *
    (part_one == l+ ({{ version, type }}, #rawSuiteId)) *
    (l-len #rawSuiteId <# 2) *
    CVersionAndType(version, type) *
    (suiteId == 0) * (messageId == {{ }}) * (ECLength == 0) *
    (part_two == {{ }}) * (ECKs == {{ }}) * (edkDef == "") *
    (part_three == {{ }}) * (EDKs == {{ }}) * (contentType == 0) * (headerIvLength == 0) *
    (frameLength == 0) * (headerLength == 0) * (headerIv == {{ }}) * (headerAuthTag == {{ }}),


    (* Not enough data to read messageId *)
    (rawHeaderData == part_one) *
    (part_one == l+ ({{ version, type }}, #rawSuiteId, messageId)) *
    (l-len #rawSuiteId == 2) *
    CVersionAndType(version, type) *
    rawToUInt16(#rawSuiteId, false, suiteId) *
    CAlgorithmSuite(suiteId, #stringId, headerIvLength, #tagLength) *
    (l-len messageId <# 16) *
    (messageId == {{ }}) * (ECLength == 0) *
    (part_two == {{ }}) * (ECKs == {{ }}) * (edkDef == "") *
    (part_three == {{ }}) * (EDKs == {{ }}) * (contentType == 0) *
    (frameLength == 0) * (headerLength == 0) * (headerIv == {{ }}) * (headerAuthTag == {{ }}),

    (* Not enough data to read contextLength *)
    (rawHeaderData == part_one) *
    (part_one == l+ ({{ version, type }}, #rawSuiteId, messageId, #rawContextLength)) *
    (l-len #rawSuiteId == 2) *
    (l-len messageId == 16) *
    CVersionAndType(version, type) *
    rawToUInt16(#rawSuiteId, false, suiteId) *
    CAlgorithmSuite(suiteId, #stringId, headerIvLength, #tagLength) *
    (l-len #rawContextLength <# 2) *
    (ECLength == 0) *
    (part_two == {{ }}) * (ECKs == {{ }}) * (edkDef == "") *
    (part_three == {{ }}) * (EDKs == {{ }}) * (contentType == 0) *
    (frameLength == 0) * (headerLength == 0) * (headerIv == {{ }}) * (headerAuthTag == {{ }}),

    (* Not enough data to read encryption context *)
    (22 <=# l-len rawHeaderData) *
    (rawHeaderData == l+ (part_one, part_two)) *
    (l-len part_one == 22) *
    (part_one == l+ ({{ version, type }}, #rawSuiteId, messageId, #rawContextLength)) *
    (l-len #rawSuiteId == 2) *
    (l-len messageId == 16) *
    (l-len #rawContextLength == 2) *
    CVersionAndType(version, type) *
    rawToUInt16(#rawSuiteId, false, suiteId) * (edkDef == "") *
    CAlgorithmSuite(suiteId, #stringId, headerIvLength, #tagLength) *
    rawToUInt16(#rawContextLength, false, ECLength) *
    (l-len rawHeaderData <# 22 + ECLength) *

    (ECKs == {{ }}) *
    (part_three == {{ }}) * (EDKs == {{ }}) * (contentType == 0) *
    (frameLength == 0) * (headerLength == 0) * (headerIv == {{ }}) * (headerAuthTag == {{ }}),

    (* Not enough data to read the header IV *)
    (22 <=# l-len rawHeaderData) *
    (rawHeaderData == l+ (part_one, part_two)) *
    (l-len part_one == 22) *
    (part_one == l+ ({{ version, type }}, #rawSuiteId, messageId, #rawContextLength)) *
    (l-len #rawSuiteId == 2) *
    (l-len messageId == 16) *
    (l-len #rawContextLength == 2) *
    CVersionAndType(version, type) *
    rawToUInt16(#rawSuiteId, false, suiteId) *
    CAlgorithmSuite(suiteId, #stringId, headerIvLength, #tagLength) *
    rawToUInt16(#rawContextLength, false, ECLength) *
    (22 + ECLength <=# l-len rawHeaderData) *

    (part_two == l+ (#EC, part_three)) *
    (l-len #EC == ECLength) *
    CRawEncryptionContext(#EC, ECKs) *

    (part_three == l+ (#edks, {{ contentType }}, {{ 0, 0, 0, 0 }}, {{ headerIvLength }}, #rawFrameLength, #rest)) *
    CContentType(contentType) *
    RawEncryptedDataKeys("Complete", part_three, 0, EDKs, #EDKsLength, _) * (edkDef == "Complete") *
    (#EDKsLength == l-len #edks) *
    (l-len #rawFrameLength == 4) *
    rawToUInt32(#rawFrameLength, false, frameLength) *
    CompatibleContentTypeAndFrameLength(contentType, frameLength) *
    (headerLength == 22 + ECLength + #EDKsLength + 1 + 4 + 1 + 4) *
    (l-len rawHeaderData <# headerLength + headerIvLength) *

    (headerIv == {{ }}) * (headerAuthTag == {{ }}),

    (* Not enough data to read the authentication tag *)
    (22 <=# l-len rawHeaderData) *
    (rawHeaderData == l+ (part_one, part_two)) *
    (l-len part_one == 22) *
    (part_one == l+ ({{ version, type }}, #rawSuiteId, messageId, #rawContextLength)) *
    (l-len #rawSuiteId == 2) *
    (l-len messageId == 16) *
    (l-len #rawContextLength == 2) *
    CVersionAndType(version, type) *
    rawToUInt16(#rawSuiteId, false, suiteId) *
    CAlgorithmSuite(suiteId, #stringId, headerIvLength, #tagLength) *
    rawToUInt16(#rawContextLength, false, ECLength) *
    (22 + ECLength <=# l-len rawHeaderData) *

    (part_two == l+ (#EC, part_three)) *
    (l-len #EC == ECLength) *
    CRawEncryptionContext(#EC, ECKs) *

    (part_three == l+ (#edks, {{ contentType }}, {{ 0, 0, 0, 0 }}, {{ headerIvLength }}, #rawFrameLength, headerIv, #rest)) *
    CContentType(contentType) *
    RawEncryptedDataKeys("Complete", part_three, 0, EDKs, #EDKsLength, _) * (edkDef == "Complete") *
    (#EDKsLength == l-len #edks) *
    (l-len #rawFrameLength == 4) *
    rawToUInt32(#rawFrameLength, false, frameLength) *
    CompatibleContentTypeAndFrameLength(contentType, frameLength) *
    (headerLength == 22 + ECLength + #EDKsLength + 1 + 4 + 1 + 4) *
    (l-len rawHeaderData <# headerLength + headerIvLength) *
    ((l-len headerIv) == headerIvLength) *
    (headerAuthTag == {{ }}),

    (* Not enough data to read the encrypted data keys *)
    (22 <=# l-len rawHeaderData) *
    (rawHeaderData == l+ (part_one, part_two)) *
    (l-len part_one == 22) *
    (part_one == l+ ({{ version, type }}, #rawSuiteId, messageId, #rawContextLength)) *
    (l-len #rawSuiteId == 2) *
    (l-len messageId == 16) *
    (l-len #rawContextLength == 2) *
    CVersionAndType(version, type) *
    rawToUInt16(#rawSuiteId, false, suiteId) *
    CAlgorithmSuite(suiteId, #stringId, headerIvLength, #tagLength) *
    rawToUInt16(#rawContextLength, false, ECLength) *
    (22 + ECLength <=# l-len rawHeaderData) *

    (part_two == l+ (#EC, part_three)) *
    (l-len #EC == ECLength) *
    CRawEncryptionContext(#EC, ECKs) *
    (part_three == #edks) *
    RawEncryptedDataKeys("Incomplete", part_three, 0, {{ }}, #EDKsLength, "") * (edkDef == "Incomplete") *
    (contentType == 0) * (frameLength == 0) * (headerLength == 0) * (headerIv == {{ }}) * (headerAuthTag == {{ }}) *
    (EDKs == {{ }});

(* Serialised complete header *)
@nopath
nounfold pred CHeader(+rawHeaderData, part_one, version, type, suiteId,
                      messageId, ECLength, part_two, ECKs, part_three, EDKs,
                      contentType, headerIvLength, frameLength, headerLength,
                      headerIv, headerAuthTag, edkDef) :
  (rawHeaderData == l+ (part_one, part_two)) *
    ((l-len part_one) == 22) *
    (part_one == l+ ({{ version, type }}, #rawSuiteId, messageId, #rawContextLength)) *
    ((l-len #rawSuiteId) == 2) *
    ((l-len messageId) == 16) *
    ((l-len #rawContextLength) == 2) * CVersionAndType(version, type) *
    rawToUInt16(#rawSuiteId, false, suiteId) *
    CAlgorithmSuite(suiteId, #stringId, headerIvLength, #tagLength) *
    rawToUInt16(#rawContextLength, false, ECLength) *
    (part_two == l+ (#EC, part_three)) *
    ((l-len #EC) == ECLength) *
    CRawEncryptionContext(#EC, ECKs) *
    CContentType(contentType) *
    (part_three == l+ (#edks, {{ contentType }}, {{ 0, 0, 0, 0 }},
                       {{ headerIvLength }}, #rawFrameLength, headerIv, headerAuthTag)) *
    CRawEncryptedDataKeys(part_three, 0, EDKs, #EDKsLength) *
    (edkDef == "Complete") *
    (#EDKsLength == (l-len #edks)) * ((l-len #rawFrameLength) == 4) *
    rawToUInt32(#rawFrameLength, false, frameLength) *
    CompatibleContentTypeAndFrameLength(contentType, frameLength) *
    (headerLength == ((((((22 + ECLength) + #EDKsLength) + 1) + 4) + 1) + 4)) *
    ((l-len headerIv) == headerIvLength) *
    ((l-len headerAuthTag) == #tagLength) *
    (((headerLength + headerIvLength) + #tagLength) <=# (l-len rawHeaderData));

    facts: (0 <# l-len rawHeaderData);


(* General serialised header *)
nounfold pred Header(definition, +rawHeaderData, part_one, version, type,
                     suiteId, messageId, ECLength, part_two, ECKs,
                     part_three, EDKs, contentType, headerIvLength,
                     frameLength, headerLength, headerIv, headerAuthTag, edkDef,
                     errorMessage) :
  (* Complete header *)
  (definition == "Complete") *
  CHeader(rawHeaderData, part_one, version, type, suiteId, messageId, ECLength, part_two, ECKs, part_three, EDKs, contentType, headerIvLength, frameLength, headerLength, headerIv, headerAuthTag, edkDef) *
  (errorMessage == ""),

  (* Incomplete header *)
  (definition == "Incomplete") *
  IHeader(rawHeaderData, part_one, version, type, suiteId, messageId, ECLength, part_two, ECKs, part_three, EDKs, contentType, headerIvLength, frameLength, headerLength, headerIv, headerAuthTag, edkDef) *
  (errorMessage == ""),

  (* Broken header *)
  (definition == "Broken") *
  BHeader(rawHeaderData, part_one, version, type, suiteId, messageId, ECLength, part_two, ECKs, part_three, EDKs, contentType, headerIvLength, frameLength, headerLength, headerIv, headerAuthTag, #ECDef, edkDef, errorMessage);

(*************************
 *************************
 *******           *******
 *******   OTHER   *******
 *******           *******
 *************************
 *************************)

lemma IntegerLtPlusOneLe(a, b)
[[
    (#a <# #b)
]]
[[
    (#a + 1 <=# #b)
]]