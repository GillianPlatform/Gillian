//
// Standard over-approximating SLL predicate with contents
//
predicate SLL(+x, vs) {
  // Empty SLL
  (x == null) * (vs == []);
  // One SLL node and the rest
  (x -b> #v, #next) * SLL(#next, #vs) *
  (vs == #v :: #vs)
}

//
// Pure predicate for list membership
//
predicate list_member(+vs, +v, r : Bool){
  (vs == []) * (r == false);
  (vs == v :: #rest) * (r == true) * list_member(#rest, v, #mem);
  (vs == #v :: #rest) * (! (#v == v)) * list_member(#rest, v, r)
}

//
// Lemma: List membership append
//
lemma list_member_append {
  statement:
    forall vs, v, r, w.
      list_member(vs, v, r) |- list_member(vs @ [ w ], v, (r || (w = v)))

  proof:
    if (w = v) {} else {}; // FIXME: THIS IS HORRIFIC
    unfold list_member(vs, v, r);
    if (not (vs = [])) {
      assert {bind: #nv, #nvs, #nr} (vs == #nv :: #nvs) * list_member(#nvs, #v, #nr);
      apply list_member_append(#nvs, v, #nr, w)
    }
}

//
// Lemma: List membership concat
//
lemma list_member_concat {
  statement:
    forall vs1, vs2, v.
      list_member(vs1, v, #r1) * list_member(vs2, v, #r2) |- list_member(vs1 @ vs2, v, (#r1 || #r2))

  proof:
    unfold list_member(vs1, v, #r1);
    if (not (vs1 = [])) {
      assert {bind: #nv1, #nvs1, #nr1} (vs1 == #nv1 :: #nvs1) * list_member(#nvs1, v, #nr1);
      apply list_member_concat(#nvs1, vs2, v)
    }
}

// 00. Allocating an SLL node with the given value
{ v == #v }
function SLL_allocate_node(v){
  t := new(2);
  [t] := v;
  return t
}
{ SLL(ret, [ #v ]) }


//
// RECURSIVE SLL MANIPULATION
//

// 01. Prepending a given value to a given SLL
{ (x == #x) * (k == #k) * SLL(#x, #vs) }
function SLL_prepend(x, k){
    z := SLL_allocate_node(k);
    [z + 1] := x;
    return z
}
{ SLL(ret, #k :: #vs) }

// 02. Appending a given value to a given SLL
{ (x == #x) * (k == #k) * SLL(#x, #vs) }
function SLL_append(x, k){
  if (x = null) {
    x := SLL_allocate_node(k)
    } else {
      t := [x + 1];
      z := SLL_append(t, k);
      [x + 1] := z
  };
  return x
}
{ SLL(ret,  #vs @ [#k]) }

// 03. Appending a given SLL node to a given SLL
{ (x == #x) * (y == #y) * SLL(#x, #vs) * SLL(#y, [#vy]) }
function SLL_append_node(x, y) {
  if (x = null) {
    x := y
  } else {
    t := [x + 1];
    z := SLL_append_node(t, y);
    [x + 1] := z
  };
  return x
}
{ SLL(ret, #vs @ [#vy]) }

// 04. Concatenating two lists
{(x == #x) * (y == #y) * SLL(#x, #vx) * SLL(#y, #vy) }
function SLL_concat(x, y) {
  if (x = null){
    x := y
  } else {
    t := [x + 1];
    z := SLL_concat(t, y);
    [x + 1] := z
  };
  return x
}
{ SLL(ret,  #vx @ #vy) }

// 05. Copying a given SLL
{ (x == #x) * SLL(#x, #vs) }
function SLL_copy(x){
  y := null;
  if (not (x = null)) {
    k := [x];
    y := SLL_allocate_node(k);
    t := [x + 1];
    z := SLL_copy(t);
    [y + 1] := z
  } else {
    skip
  };
  return y
}
{ SLL(#x, #vs) * SLL(ret, #vs) }

// 06. Calculating the length of a given SLL
{ (x == #x) *  SLL(#x, #vs) }
function SLL_length(x) {
  n := 0;
  if (x = null){
    n := 0
  } else {
    t := [x + 1];
    n := SLL_length(t);
    n := 1 + n
  };
  return n
}
{ ret == len(#vs) }

// 07. Reversing a given SLL
{ (x == #x) *  SLL(#x, #vs) }
function SLL_reverse(x){
  if (not (x = null)) {
    t := [x + 1];
    [x + 1] := null;
    z := SLL_reverse(t);
    y := SLL_append_node(z, x)
  } else {
    y := null
  };
  return y
}
{ SLL(ret,rev #vs) }

// 08. Checking if a given value is in a given SLL
{ (x == #x) * (k == #k) * SLL(#x, #vs) * list_member(#vs, #k, #r) }
function SLL_member(x, k){
  found := false;
  if (x = null){
    skip
  } else {
    v := [x];
    if (v = k){
      found := true
    } else {
      t := [x + 1];
      found := SLL_member(t, k)
    }
  };
  return found
}
{ SLL(#x, #vs) * list_member(#vs, #k, #r) * (ret == #r) }

// 09. Removing a given value from a given SLL
{ (x == #x) * (k == #k) * SLL(#x, #vs) * list_member(#vs, #k, #mem) }
function SLL_remove(x, k) {
  if (x = null) {
    skip
  } else {
    v := [x];
    next := [x + 1];
    if (v = k){
      free(x);
      x := SLL_remove(next, k)
    } else {
       z := SLL_remove(next, k);
       [x + 1] := z
    }
  };
  return x
}
{ SLL(ret, #nvs) * list_member(#nvs, #k, false) }

// 10. Freeing a given SLL
{ (x == #x) * SLL(#x, #vs) }
function SLL_free(x){
  if (x = null) {
    skip
  } else {
    t := [x + 1];
    z := SLL_free(t);
    free(x)
  };
  return null
}
{ (ret == null) }

//
// ITERATIVE LIST MANIPULATION
//

//
// Standard over-approximating SLL segment predicate with contents
//
predicate SLLseg(+x, y, vs) {
  (x == y) * (vs == []);
  (x -b> #v, #next) * SLLseg(#next, y, #vs) * (vs == #v :: #vs)
}

//
// Lemma: appending a given value to a given SLLseg
//
lemma SSLseg_append {
  statement:
    forall x, vs, v, z.
      SLLseg(x, #y, vs) * (#y -b> v, z) |- SLLseg(x, z, vs @ [ v ])

  proof:
    unfold SLLseg(x, #y, vs);
    if (not (x = #y)) {
      assert {bind: #nv, #nnext, #nvs}
        (x -b> #nv, #nnext) * SLLseg(#nnext, #y, #nvs) *
        (vs == #nv :: #nvs);
      apply SSLseg_append(#nnext, #nvs, v, z);
      fold SLLseg(x, z, vs @ [ v ])
    } else {
      fold SLLseg(#y, z, [ v ])
    }
}

//
// Lemma: an SLLseg followed by an SLL is an SLL
//
lemma SLLseg_concat_SLL {
  statement:
    forall x, y.
      SLLseg(x, y, #vx) * SLL(y, #vy) |- SLL (x, #vx @ #vy)

  proof:
    unfold SLLseg(x, y, #vx);
    if (not (#vx = [])){
      assert {bind: #nv, #nnext} (x -b> #nv, #nnext);
      apply SLLseg_concat_SLL(#nnext, y)
    }
}

//
// Lemma: a null-terminating SLLseg is an SLL
//
lemma SLLseg_to_SLL {
  statement:
    forall x.
      SLLseg(x, null, #vx) |- SLL(x, #vx)

  proof:
    unfold SLLseg(x, null, #vx);
    if (not (#vx = [])){
      assert {bind: #nv, #nnext} (x -b> #nv, #nnext);
      apply SLLseg_to_SLL(#nnext)
    }
}

// 02. Appending a given value to a given SLL
{ (x == #x) * (k == #k) * SLL(#x, #vx) }
function SLL_append_iter(x, k){
  y := SLL_allocate_node(k);
  if (x = null) {
    x := y
  } else {
    head := x;
    prev := head;
    next := [x + 1];
    [[ invariant {bind: prev, next, #vs1, #vs2, #v}
          SLLseg(head, prev, #vs1) * (prev -b> #v, next) * SLL(next,  #vs2) *
           (#vx == #vs1 @ (#v :: #vs2)) ]];
    while(not (next = null)){
      prev := next;
      next := [next + 1]
    };
    [prev + 1] := y
  };
  return x
}
{ SLL(ret, #vx @ [ #k ]) }

// 03. Appending a given node to a given SLL
{ (x == #x) * (y == #y) * SLL(#x, #vs) * SLL(#y, [#vy]) }
function SLL_append_node_iter(x, y){
  if (x = null) {
    x := y
  } else {
    head := x;
    prev := head;
    next := [x + 1];
    [[ invariant {bind: prev, next, #vs1, #vs2, #v}
          SLLseg(head, prev, #vs1) * (prev -b> #v, next) * SLL(next,  #vs2) *
           (#vx == #vs1 @ (#v :: #vs2)) ]];
    while(not (next = null)){
      prev := next;
      next := [next + 1]
    };
    [prev + 1] := y
  };
  return x
}
{ SLL(ret, #vs @ [#vy]) }

// 04. Concatenating two lists
{(x == #x) * (y == #y) * SLL(#x, #vx) * SLL(#y, #vy) }
function SLL_concat_iter(x, y){
  if (x = null) {
    head := y
  } else {
    head := x;
    prev := head;
    next := [x + 1];
    [[ invariant {bind: prev, next, #vs1, #vs2, #v}
          SLLseg(head, prev, #vs1) * (prev -b> #v, next) * SLL(next,  #vs2) *
           (#vx == #vs1 @ (#v :: #vs2)) ]];
    while (not (next = null)) {
        prev := next;
        next := [next + 1]
    };
    [prev + 1] := y
  };
  return head
}
{ SLL(ret, #vx @ #vy) }

// 05. Copying a given SLL
{ (x == #x) * SLL(#x, #alpha) }
function SLL_copy_iter(x){
    y := null;
    if (x = null){
        skip
    } else {
        y := new(2);
        v := [x];
        [y] := v;
        t := [x + 1];
        p := y;
        [[ invariant {bind: c, v, t, p, #alpha1, #alpha2, #alpha3, #a}
          SLLseg(x, t, #alpha1) * SLL(t, #alpha2) * (v == #a) *
            (#alpha == (#alpha1 @ #alpha2)) * SLLseg(y, p, #alpha3) * (p -b> #a, null) *
                (#alpha1 == (#alpha3 @ [#a])) ]];
        while (not (t = null)){
            v := [t];
            c := new(2);
            [c] := v;
            [p + 1] := c;
            p := c;
            t := [t + 1]
        }
    };
    return y
}
{ SLL(#x, #alpha) * SLL(ret, #alpha) }

// 06. Calculating the length of a given SLL
{ (x == #x) * SLL(x, #vx) }
function SLL_length_iter(x) {
  y := x;
  n := 0;
  [[invariant {bind: n, y, #nvx,  #nvy}
      SLLseg(x, y,  #nvx) * SLL(y, #nvy) *
         (#vx == (#nvx@#nvy)) * (n == len #nvx) ]];
  while (not (y = null)) {
    y := [y+1];
    n := n+1
  };
  [[ unfold SLL(null, #nvy)]];
  return n
}
{ SLL(#x, #vx) * (ret == len(#vx)) }

// 08. Checking if a given value is in a given SLL
{ (x == #x) * (k == #k) * SLL(#x, #alpha) * list_member(#alpha, #k, #r) }
function SLL_member_iter(x, k) {
  found := false;
  next := x;
  [[ invariant {bind: found, next, #beta, #gamma, #rg}
       SLLseg(x, next, #beta) * SLL(next, #gamma) *
         (#alpha == (#beta @ #gamma)) * (#r == (found || #rg)) *
           list_member(#beta, k, found) * list_member(#gamma, k, #rg) ]];
  while ((found = false) && (not (next = null))){
    v := [next];
    found := (v = k);
    next := [next + 1]
  };
  return found
}
{ SLL(#x, #alpha) * list_member(#alpha, #k, #r) * (ret == #r) }

// 10. Freeing a given SLL
{ (x == #x) * SLL(#x, #vs) }
function SLL_free_iter(x) {
  [[ invariant {bind: x, #rvs} SLL(x, #rvs) ]];
  while (not (x = null)) {
    y := x;
    x := [x + 1];
    free(y)
  };
  return null
}
{ (ret == null) }
