import "wisl_pointer_arith.gil", "wisl_core.gil";


spec double_free_one_var(x)
  [[  emp  ]]
  [[  emp  ]]
  normal
proc double_free_one_var(x) {
             x := [alloc](1.);
             goto [(l-nth(x, 1.) = 0.)] continue0 fail0;
  fail0:     fail [InvalidBlockPointer](x);
  continue0: gvar0 := [dispose](l-nth(x, 0.));
             goto [(l-nth(x, 1.) = 0.)] continue1 fail1;
  fail1:     fail [InvalidBlockPointer](x);
  continue1: gvar1 := [dispose](l-nth(x, 0.));
             ret := null;
             return
};


spec double_free_many_vars()
  [[  emp  ]]
  [[  emp  ]]
  normal
proc double_free_many_vars() {
             y := [alloc](2.);
             x := [alloc](3.);
             z := x;
             goto [(l-nth(x, 1.) = 0.)] continue0 fail0;
  fail0:     fail [InvalidBlockPointer](x);
  continue0: gvar0 := [dispose](l-nth(x, 0.));
             goto [(l-nth(y, 1.) = 0.)] continue1 fail1;
  fail1:     fail [InvalidBlockPointer](y);
  continue1: gvar1 := [dispose](l-nth(y, 0.));
             goto [(l-nth(z, 1.) = 0.)] continue2 fail2;
  fail2:     fail [InvalidBlockPointer](z);
  continue2: gvar2 := [dispose](l-nth(z, 0.));
             ret := null;
             return
};
