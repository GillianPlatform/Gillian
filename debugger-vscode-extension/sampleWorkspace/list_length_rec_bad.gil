import "wisl_pointer_arith.gil", "wisl_core.gil";


pred list(+x, alpha : List) : (x == null) * (alpha == {{  }}),
  <cell>(#wisl__0, #wisl__1; #v) * <cell>(#wisl__0, (#wisl__1 i+ 1i); #z) *
  types(#wisl__0 : Obj, #wisl__1 : Int) * (x == {{ #wisl__0, #wisl__1 }}) *
  list(#z, #beta) * (alpha == l+ ({{ #v }}, #beta));

spec llen(x)
  [[  (x == #x) * list(#x, #alpha)  ]]
  [[  list(#x, #alpha) * (ret == (l-len #alpha))  ]]
  normal
proc llen(x) {
             goto [(x = null)] then0 else0;
  then0:     n := 0i;
             goto endif0;
  else0:     goto [(l-nth(x, 1i) = 0i)] continue0 fail0;
  fail0:     fail [InvalidBlockPointer](x);
  continue0: gvar0 := [dispose](l-nth(x, 0i));
             gvar1 := "i__add"(x, 1i);
             goto [((typeOf gvar1) = List)] continue1 fail1;
  fail1:     fail [InvalidPointer]();
  continue1: gvar2 := [getcell](l-nth(gvar1, 0i), l-nth(gvar1, 1i));
             t := l-nth(gvar2, 2i);
             n := "llen"(t);
             gvar3 := "i__add"(n, 1i);
             n := gvar3;
  endif0:    skip;
             ret := n;
             return
};
