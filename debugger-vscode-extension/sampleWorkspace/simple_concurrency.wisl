predicate is_zero(+x, y) {
    (x == 0) * (y == 1);
    (! (x == 0)) * (y == 0)
}

{ (x == #x) * (#x -> #v)}
function f(x) {
    [x] := 1;
    return null
}
{ #x -> 1 }

{ emp }
function conc() {
    x := new(2);
    par {
        u := f(x);
        u := f(x + 1)
    };
    return x
}
{ ret -> 1, 1 }